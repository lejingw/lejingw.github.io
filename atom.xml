<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lejingw&#39;s blog</title>
  
  
  <link href="https://lejingw.github.io/atom.xml" rel="self"/>
  
  <link href="https://lejingw.github.io/"/>
  <updated>2020-10-09T05:56:46.622Z</updated>
  <id>https://lejingw.github.io/</id>
  
  <author>
    <name>lejingw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSH端口转发</title>
    <link href="https://lejingw.github.io/2017/08/04/2017-08-04-SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    <id>https://lejingw.github.io/2017/08/04/2017-08-04-SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</id>
    <published>2017-08-04T02:45:32.000Z</published>
    <updated>2020-10-09T05:56:46.622Z</updated>
    
    <content type="html"><![CDATA[<h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~&#x2F;.ssh&#x2F;id_rsa  -ND 8157 hadoop@masterNodeIP</span><br></pre></td></tr></table></figure><table><thead><tr><th>操作系统</th><th>Chrome 位置</th></tr></thead><tbody><tr><td>Mac OS X</td><td>/Applications/Google Chrome.app/Contents/MacOS/Google Chrome</td></tr><tr><td>Linux</td><td>/usr/bin/google-chrome</td></tr><tr><td>Windows</td><td>C:\Program Files (x86)\Google\Chrome\Application\chrome.exe</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome --proxy-server&#x3D;&quot;socks5:&#x2F;&#x2F;localhost:8157&quot; \</span><br><span class="line">       --host-resolver-rules&#x3D;&quot;MAP * 0.0.0.0 , EXCLUDE localhost&quot; \</span><br><span class="line">       --user-data-dir&#x3D;&#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 本地端口转发</span><br><span class="line">ssh -i ~&#x2F;.ssh&#x2F;id_rsa -N -L 8157:masterNodeIP:8088 hadoop@masterNodeIP</span><br></pre></td></tr></table></figure><h3 id="eg-nat网络下，访问vm1-8088"><a href="#eg-nat网络下，访问vm1-8088" class="headerlink" title="eg:nat网络下，访问vm1:8088"></a>eg:nat网络下，访问vm1:8088</h3><p>proxy_chrome.sh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">nohup ssh -i .ssh&#x2F;id_rsa -ND 8157 -p 20122 root@localhost 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">cd &#x2F;Applications&#x2F;Google\ Chrome.app&#x2F;Contents&#x2F;MacOS</span><br><span class="line"></span><br><span class="line">.&#x2F;Google\ Chrome --proxy-server&#x3D;&quot;socks5:&#x2F;&#x2F;localhost:8157&quot; \</span><br><span class="line">    --host-resolver-rules&#x3D;&quot;MAP * 0.0.0.0 , EXCLUDE localhost&quot; \</span><br><span class="line">    --user-data-dir&#x3D;&#x2F;tmp&#x2F; http:&#x2F;&#x2F;vm1:8088</span><br></pre></td></tr></table></figure><h3 id="通过SSH穿透jumpserver访问内部主机"><a href="#通过SSH穿透jumpserver访问内部主机" class="headerlink" title="通过SSH穿透jumpserver访问内部主机"></a>通过SSH穿透jumpserver访问内部主机</h3><ol><li>目前的简单架构<br> A（Client）以Macbook为例【内网：192.168.2.3】<br> B (Jumpserver Host) 阿里云跳板机  <pre><code> 【内网：10.1.175.1   外网：121.11.11.134】</code></pre> C  阿里内部主机【内网：10.1.175.2】</li><li>实现目的：<br> A 通过SSH直接登陆到C （不需要先登陆到B，再通过SSH登陆到C）</li><li>A上如何设置（A主机用户user1,B主机用户admin,C用户主机user2）</li></ol><h3 id="Setps"><a href="#Setps" class="headerlink" title="Setps"></a>Setps</h3><ol><li>创建ssh-key，并把id_rsa.pub公钥注入B主机用户admin的~/.ssh/authorized_keys</li><li>A主机<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   cd .ssh&#x2F;</span><br><span class="line">   vim config</span><br><span class="line">Host B</span><br><span class="line">        user admin</span><br><span class="line">        port 4777             #####jumpserver的ssh端口####</span><br><span class="line">        hostname 121.11.11.134</span><br><span class="line">Host C</span><br><span class="line">        hostname 10.1.175.2</span><br><span class="line">        ProxyCommand ssh B -W %h:%p        #####%h 表示 hostname %p 表示 port######</span><br><span class="line">        user user2</span><br></pre></td></tr></table></figure></li><li>测试<br> <code>$：ssh C  ######进行登陆</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;端口转发&quot;&gt;&lt;a href=&quot;#端口转发&quot; class=&quot;headerlink&quot; title=&quot;端口转发&quot;&gt;&lt;/a&gt;端口转发&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
    <category term="linux" scheme="https://lejingw.github.io/tags/linux/"/>
    
    <category term="ssh" scheme="https://lejingw.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Java高并发-3锁优化</title>
    <link href="https://lejingw.github.io/2017/02/24/2017-02-24-Java%E9%AB%98%E5%B9%B6%E5%8F%91-3%E9%94%81%E4%BC%98%E5%8C%96/"/>
    <id>https://lejingw.github.io/2017/02/24/2017-02-24-Java%E9%AB%98%E5%B9%B6%E5%8F%91-3%E9%94%81%E4%BC%98%E5%8C%96/</id>
    <published>2017-02-24T03:35:29.000Z</published>
    <updated>2020-10-09T05:56:46.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><ul><li>减小锁持有时间</li><li>减小锁粒度(对数据的分割)<br>如<code>ConcurrentHashMap</code>默认情况下会有16个segment, 单独对segment对加锁<br>当系统需要取得全局锁时, 其消耗的资源会比较多, 如<code>size()</code>方法</li><li>使用读写分离锁来替换独占锁(对功能点的分割)</li><li>锁分离<br>在<code>LinkedBlockingQueue</code>中, <code>take()</code>和<code>put()</code>函数, 分别采用了两把不同的锁.</li><li>锁粗化</li></ul><h2 id="虚拟机层面对并行程序的优化支持"><a href="#虚拟机层面对并行程序的优化支持" class="headerlink" title="虚拟机层面对并行程序的优化支持"></a>虚拟机层面对并行程序的优化支持</h2><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>使用虚拟机参数<code>-XX:+UseBiasedLocking</code>开启偏向锁<br>当一个线程获得了一个锁, 则<strong>这个锁</strong>就进入了偏向模式, 当该线程再次获取该锁时, 无须任务同步操作<br>从而节省了有关锁的申请, 提高了性能.</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>轻量级锁简单的将对象头部作为指针, 指向<strong>持有锁的线程堆栈的内部</strong>, 来判断一个线程是否持有对象锁.<br>如果加锁成功, 则可以顺利进入临界区. 如果加锁失败, 表示其他线程抢先争夺了锁, 那么当前线程的锁请求就会膨胀为重量级锁.</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>锁膨胀后, 虚拟机为了避免线程真实的在操作系统层面挂起, 会做最后的努力—自旋锁.<br>虚拟机会让当前线程做几个空循环(即自旋), 在经过若干次循环后, 如果可以得到锁, 则顺利进入临界区. 否则, 真实的在操作系统层面挂起.</p><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>基于逃逸分析(即观察某个变量是否会逃出某个作用域), 逃逸分析必须在<code>-server</code>模式下进行, 使用参数<code>-XX:+DoEscapeAnalysis</code>打开. 使用参数<code>-XX:+EliminateLocks</code>打开锁消除.</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>TheadLocal对象及内部对象的垃圾回收, 其中的ThreadLocalMap中的Entry继承自WeakPreference<ThreadLocal></p><h2 id="无锁计算"><a href="#无锁计算" class="headerlink" title="无锁计算"></a>无锁计算</h2><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><ul><li>AtomicInteger</li><li>Unsafe类</li><li>AtomicReference</li><li>AtomicStampedReference</li><li>AtomicIntegerArray<br>AtomicLongArray AtomicReferenceArray</li><li>AtomicIntegerFieldUpdater<ol><li>Updater只能修改可见范围内的变量</li><li>为了变量能被准确的读取, 它必须是volatile类型的</li><li>由于CAS操作会通过对象实例中的偏移量直接进行赋值, 因此, 它不支持static字段(Unsafe.objectFieldOffset()不支持静态变量)</li></ol></li><li>SynchronousQueue</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;锁优化&quot;&gt;&lt;a href=&quot;#锁优化&quot; class=&quot;headerlink&quot; title=&quot;锁优化&quot;&gt;&lt;/a&gt;锁优化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;减小锁持有时间&lt;/li&gt;
&lt;li&gt;减小锁粒度(对数据的分割)&lt;br&gt;如&lt;code&gt;ConcurrentHashMap&lt;/</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="java" scheme="https://lejingw.github.io/tags/java/"/>
    
    <category term="concurrency" scheme="https://lejingw.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>docker-zookeeper</title>
    <link href="https://lejingw.github.io/2017/02/24/2017-02-24-docker-zookeeper/"/>
    <id>https://lejingw.github.io/2017/02/24/2017-02-24-docker-zookeeper/</id>
    <published>2017-02-24T03:35:23.000Z</published>
    <updated>2020-10-09T05:56:46.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h2><p>使用官方image<code>docker pull zookeeper</code></p><h2 id="zk的基本使用"><a href="#zk的基本使用" class="headerlink" title="zk的基本使用"></a>zk的基本使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my_zk -d zookeeper:latest</span><br><span class="line">docker logs -f my_zk</span><br></pre></td></tr></table></figure><p>使用zk命令行客户端连接zk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --rm --link my_zk:zookeeper1 zookeeper zkCli.sh -server zookeeper1</span><br></pre></td></tr></table></figure><h2 id="zk集群搭建"><a href="#zk集群搭建" class="headerlink" title="zk集群搭建"></a>zk集群搭建</h2><p>docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">zoo1:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo1</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;2181&quot;</span><span class="string">:&quot;2181&quot;</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">zoo2:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;2182&quot;</span><span class="string">:&quot;2181&quot;</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">zoo3:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">zoo3</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;2183&quot;</span><span class="string">:&quot;2181&quot;</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">ZOO_SERVERS:</span> <span class="string">server.1=zoo1:2888:3888</span> <span class="string">server.2=zoo2:2888:3888</span> <span class="string">server.3=zoo3:2888:3888</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着我们在 docker-compose.yml 当前目录下运行:<br><code>COMPOSE_PROJECT_NAME=zk_test docker-compose up</code><br>查看:<br><code>COMPOSE_PROJECT_NAME=zk_test docker-compose ps</code></p><h2 id="使用docker命令行客户端连接zk集群"><a href="#使用docker命令行客户端连接zk集群" class="headerlink" title="使用docker命令行客户端连接zk集群"></a>使用docker命令行客户端连接zk集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm \</span><br><span class="line">        --link zoo1:zk1 \</span><br><span class="line">        --link zoo2:zk2 \</span><br><span class="line">        --link zoo3:zk3 \</span><br><span class="line">        --net zktest_default \</span><br><span class="line">        zookeeper zkCli.sh -server zk1:2181,zk2:2181,zk3:2181</span><br></pre></td></tr></table></figure><p><code>zkCli.sh -server localhost:2181,localhost:2182,localhost:2183</code></p><h2 id="查看集群"><a href="#查看集群" class="headerlink" title="查看集群"></a>查看集群</h2><p>通过发送nc命令连接到zk服务器, 然后发送stat查看zk服务的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">stat</span> | nc 127.0.0.1 2181</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">stat</span> | nc 127.0.0.1 2182</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">stat</span> | nc 127.0.0.1 2183</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;镜像下载&quot;&gt;&lt;a href=&quot;#镜像下载&quot; class=&quot;headerlink&quot; title=&quot;镜像下载&quot;&gt;&lt;/a&gt;镜像下载&lt;/h2&gt;&lt;p&gt;使用官方image&lt;code&gt;docker pull zookeeper&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;zk的基本使</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="docker" scheme="https://lejingw.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Scala基本语法</title>
    <link href="https://lejingw.github.io/2017/02/24/2017-02-24-Scala%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://lejingw.github.io/2017/02/24/2017-02-24-Scala%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2017-02-24T03:35:15.000Z</published>
    <updated>2020-10-09T05:56:46.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scala-基本语法"><a href="#Scala-基本语法" class="headerlink" title="Scala 基本语法"></a>Scala 基本语法</h1><h2 id="Array-or-ArrayBuffer"><a href="#Array-or-ArrayBuffer" class="headerlink" title="Array or ArrayBuffer"></a>Array or ArrayBuffer</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">for</span>(i&lt;-b2 <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">1</span>)<span class="keyword">yield</span>&#123;print(i);i*<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> arr = b2.filter(_%<span class="number">2</span>==<span class="number">1</span>).map(_*<span class="number">3</span>)</span><br><span class="line"><span class="keyword">var</span> arr = b2.filter &#123;_ %<span class="number">2</span>==<span class="number">1</span>&#125; map &#123; <span class="number">3</span>*_&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="literal">true</span></span><br><span class="line"><span class="keyword">val</span> indexs = <span class="keyword">for</span>(i &lt;- <span class="number">0</span> until a.length <span class="keyword">if</span> first || a(i)&gt;=<span class="number">0</span>)<span class="keyword">yield</span>&#123; <span class="keyword">if</span>(a(i)&lt;<span class="number">0</span>) first = <span class="literal">false</span>; i&#125;</span><br><span class="line"><span class="keyword">for</span>(j&lt;<span class="number">-0</span> until indexs.length) a(j)=a(indexs(j))</span><br><span class="line">a.trimEnd(a.length - indexs.length)</span><br></pre></td></tr></table></figure><h2 id="map-and-tuple-元组"><a href="#map-and-tuple-元组" class="headerlink" title="map and tuple(元组)"></a>map and tuple(元组)</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = (<span class="number">1</span>, <span class="number">3.14</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">println(t _3)</span><br><span class="line"><span class="keyword">var</span> (first, second, _) = t</span><br><span class="line">println(first)</span><br><span class="line"></span><br><span class="line"># zip 拉链</span><br><span class="line"><span class="keyword">for</span>((a, b)&lt;- (<span class="type">Array</span>(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;&gt;&quot;</span>) zip <span class="type">Array</span>(<span class="number">2</span>, <span class="number">10</span>, <span class="number">2</span>)).toMap) <span class="type">Console</span>.println(a*b)</span><br><span class="line"><span class="keyword">for</span>((a, b)&lt;-( <span class="type">Array</span>(<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;&gt;&quot;</span>) zip <span class="type">Array</span>(<span class="number">2</span>, <span class="number">10</span>, <span class="number">2</span>) zip <span class="type">Array</span>(<span class="number">4</span>,<span class="number">2</span>,<span class="number">4</span>))) <span class="type">Console</span>.println(a._1*b)</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p.isInstanceOf[<span class="type">Employee</span>]) &#123;</span><br><span class="line">  <span class="keyword">val</span> s = p.asInstanceOf[<span class="type">Employee</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p.getClass == classOf[<span class="type">Employee</span>])&#123;&#125;</span><br><span class="line"><span class="comment">//使用模式匹配</span></span><br><span class="line">p <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> s:<span class="type">Employee</span> =&gt; ...<span class="comment">//</span></span><br><span class="line">  <span class="keyword">case</span> _ =&gt; <span class="comment">//p不是Employee</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Scala-基本语法&quot;&gt;&lt;a href=&quot;#Scala-基本语法&quot; class=&quot;headerlink&quot; title=&quot;Scala 基本语法&quot;&gt;&lt;/a&gt;Scala 基本语法&lt;/h1&gt;&lt;h2 id=&quot;Array-or-ArrayBuffer&quot;&gt;&lt;a href=&quot;#A</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="scala" scheme="https://lejingw.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>Java高并发-2JDK对并行程序的支持</title>
    <link href="https://lejingw.github.io/2017/01/04/2017-01-04-Java%E9%AB%98%E5%B9%B6%E5%8F%91-2JDK%E5%AF%B9%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>https://lejingw.github.io/2017/01/04/2017-01-04-Java%E9%AB%98%E5%B9%B6%E5%8F%91-2JDK%E5%AF%B9%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%94%AF%E6%8C%81/</id>
    <published>2017-01-04T01:40:40.000Z</published>
    <updated>2020-10-09T05:56:46.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步控制"><a href="#同步控制" class="headerlink" title="同步控制"></a>同步控制</h2><h3 id="重入锁ReentrantLock"><a href="#重入锁ReentrantLock" class="headerlink" title="重入锁ReentrantLock"></a>重入锁ReentrantLock</h3><p>一个线程可以多次获得锁, 也必须释放相同次数的锁.</p><h4 id="中断响应"><a href="#中断响应" class="headerlink" title="中断响应"></a>中断响应</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock.lockInterruptibly();</span><br><span class="line">...</span><br><span class="line">lock.interrupt();</span><br></pre></td></tr></table></figure><h4 id="锁申请等待限时"><a href="#锁申请等待限时" class="headerlink" title="锁申请等待限时"></a>锁申请等待限时</h4><p><code>lock.tryLock(5, TimeUnit.SECONDS)</code></p><h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><h3 id="重入锁的好搭档-Condition条件"><a href="#重入锁的好搭档-Condition条件" class="headerlink" title="重入锁的好搭档:Condition条件"></a>重入锁的好搭档:Condition条件</h3><p>wait()和nofity()方法是和synchronized关键字配合使用<br>Condition是与重入锁相关联的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void await() throws InterruptedException;</span><br><span class="line">void awaitUniterruptibly();</span><br><span class="line">long awaitNanos(long nanosTimeout) throws InterruptedException;</span><br><span class="line">boolean await(long time, TimeUnit unit) throws InterruptedException;</span><br><span class="line">boolean awaitUnit(Date deadline) throws InterruptedException;</span><br><span class="line">void signal();</span><br><span class="line">void signalAll();</span><br></pre></td></tr></table></figure><h3 id="允许多个线程同时访问-信号量-Semaphore"><a href="#允许多个线程同时访问-信号量-Semaphore" class="headerlink" title="允许多个线程同时访问:信号量(Semaphore)"></a>允许多个线程同时访问:信号量(Semaphore)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public Semaphore(int permits)</span><br><span class="line">public Semaphore(int permits, boolean fair)</span><br><span class="line"></span><br><span class="line">public void acquire()</span><br><span class="line">public void acquireUninterruptibly()</span><br><span class="line">public boolean tryAcquire()</span><br><span class="line">public boolean tryAcquire(long timeout, TimeUnit unit)</span><br><span class="line">public void release()</span><br></pre></td></tr></table></figure><h3 id="倒计数器-ConuntDownLatch"><a href="#倒计数器-ConuntDownLatch" class="headerlink" title="倒计数器:ConuntDownLatch"></a>倒计数器:ConuntDownLatch</h3><h3 id="循环栅栏-CyclicBarrier"><a href="#循环栅栏-CyclicBarrier" class="headerlink" title="循环栅栏:CyclicBarrier"></a>循环栅栏:CyclicBarrier</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public CyclicBarrier(int parties, Runnable barrierAction)</span><br></pre></td></tr></table></figure><h3 id="线程阻塞工具类-LockSupport"><a href="#线程阻塞工具类-LockSupport" class="headerlink" title="线程阻塞工具类: LockSupport"></a>线程阻塞工具类: LockSupport</h3><p><code>LockSupport.park()</code>阻塞当前线程<br>即时unpark()操作发生在park之前,它也可以使下一次的park()操作立即返回<br>另外处于park()状态的线程, 发生了interrupt()操作, 也会使该线程响应这个中断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FIFOMutex</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean locked = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Thread&gt; waiters = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;Thread&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> wasInterrupted = <span class="keyword">false</span>;</span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    waiters.add(current);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Block while not first in queue or cannot acquire lock</span></span><br><span class="line">    <span class="keyword">while</span>(waiters.peek() != current || !locked.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">      LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (Thread.interrupted()) <span class="comment">// ignore interrupts while waiting</span></span><br><span class="line">        wasInterrupted = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    waiters.remove();</span><br><span class="line">    <span class="keyword">if</span> (wasInterrupted)<span class="comment">// reassert interrupt status on exit</span></span><br><span class="line">      current.interrupt();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    locked.set(<span class="keyword">false</span>);</span><br><span class="line">    LockSupport.unpark(waiters.peek());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程复用-线程池"><a href="#线程复用-线程池" class="headerlink" title="线程复用: 线程池"></a>线程复用: 线程池</h2><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ul><li>scheduleAtFixedRate<br>如果配置的周期太短(小于任务执行的时长), 则上个任务执行完后, 立即执行下一个任务 </li><li>scheduleWithFixedDelay<br>上一个任务执行完后, 等待固定的周期, 开始执行下一个任务</li></ul><blockquote><p>如果任务本身抛出了异常, 那么后续所有任务都会停止调度, 因此, 必须保证异常被及时处理</p></blockquote><h3 id="核心线程池的内部实现"><a href="#核心线程池的内部实现" class="headerlink" title="核心线程池的内部实现"></a>核心线程池的内部实现</h3><p>内部都使用了<code>ThreadPoolExecutor</code>:  </p><ul><li>corePoolSize 指定了线程池中的线程数量</li><li>maximunPoolSize</li><li>keepAliveTime 当线程数量超过corePoolSize时, 多余的空闲线程的存活时间</li><li>unit keepAliveTime的单位</li><li>workQueue 任务队列, 被提交但未被执行的任务</li><li>threadFactory 线程工程, 用于创建线程</li><li>handler 拒绝策略, 当任务太多来不及处理, 如何拒绝任务</li></ul><p>在ThreadPoolExecutor的构造函数中可以使用以下几种BlockingQueue:</p><ul><li>直接提交的队列: 由SynchronousQueue对象提供. SynchronousQueue没有容量, 提交的任务不会被真实的保存. 每次插入都需要等待一个响应的删除操作. 反之, 每次删除都需要等待一个插入的操作. 使用SynchronousQueue队列, 通常要设置很大的maximunPoolSize值, 否则很容易执行拒绝策略.</li><li>有界的任务队列: 可以使用ArrayBlockingQueue实现. 有界队列仅当任务队列装满时, 才可能将线程数提升到corePoolSize以上, 若大于maximumPoolSize, 则执行拒绝策略. 换言之, 除非系统非常繁忙, 否则确保核心线程数维持在corePoolSize.</li><li>无界的任务队列: 可以使用LinkedBlockingQueue实现. 当系统的线程数达到corePoolSize后, 就不会续集增加. 直到系统内存耗尽.</li><li>优先任务队列: 通过PriorityBlockingQueue实现.</li></ul><h2 id="分而治之-Fork-Join框架"><a href="#分而治之-Fork-Join框架" class="headerlink" title="分而治之: Fork/Join框架"></a>分而治之: Fork/Join框架</h2><p>向ForkJoinPool线程池提交一个ForkJoinTask任务(RecursiveAction和RecursiveTask)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class CountTask extends RecursiveTask&lt;Long&gt;&#123;</span><br><span class="line">  private static final int THRESHOLD &#x3D; 10000;</span><br><span class="line">  private long start;</span><br><span class="line">  private long end;</span><br><span class="line">  public CountTask(long start, long end)&#123;</span><br><span class="line">    this.start &#x3D; start;</span><br><span class="line">    this.end &#x3D; end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public Long compute()&#123;</span><br><span class="line">    long sum &#x3D; 0;</span><br><span class="line">    boolean canCompute &#x3D; (end-start)&lt;THRESHOLD;</span><br><span class="line">    if(canCopute)&#123;</span><br><span class="line">      for(long i&#x3D;start;i&lt;&#x3D;end;i++)sum +&#x3D;i;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      long step &#x3D; (start - end) &#x2F; 100;</span><br><span class="line">      ArrayList&lt;CountTask&gt; subTasks &#x3D; new ArrayList&lt;CountTask&gt;();</span><br><span class="line">      long pos &#x3D; start;</span><br><span class="line">      for(int i&#x3D;0;i&lt;100;i++)&#123;</span><br><span class="line">        long lastOne &#x3D; pos + step;</span><br><span class="line">        if(lastOne &gt; end) lastOne &#x3D; end;</span><br><span class="line">        CountTask subTask &#x3D; new CountTask(pos, lastOne);</span><br><span class="line">        pos +&#x3D; step + 1;</span><br><span class="line">        subTasks.add(subTask);</span><br><span class="line">        subTask.fork();</span><br><span class="line">      &#125;</span><br><span class="line">      for(CountTask task : subTasks)&#123;</span><br><span class="line">        sum +&#x3D; task.join();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public static void main(String[] args)&#123;</span><br><span class="line">    ForkJoinPool forkJoinPool &#x3D; new ForkJoinPool();</span><br><span class="line">    CountTask task &#x3D; new CountTask(0, 200000L);</span><br><span class="line">    ForkJoinTask&lt;Long&gt; result &#x3D; forkJoinPool.submit(task);</span><br><span class="line">    try&#123;</span><br><span class="line">      long res &#x3D; result.get();</span><br><span class="line">      System.out.println(&quot;sum&#x3D;&quot; + res);</span><br><span class="line">    &#125;catch(InterruptedException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">    catch(ExecutionException e)&#123;e.printStackTrace();&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDK并发容器"><a href="#JDK并发容器" class="headerlink" title="JDK并发容器"></a>JDK并发容器</h2><ul><li>ConcurrentHashMap</li><li>CopyOnWriteArrayList<br>读操作远大于写操作</li><li>ConcurrentLinkedQueue<br>实现复杂, 并发性能好, tail更新不是及时的, 会跳跃两个元素</li><li>BlockingQueue<br>具体实现有ArrayBlockingQueue和LinkedBlockingQueue<br>put() 和 take() 会阻塞<br>offer() 和 poll() 会直接返回boolean</li><li>ConcurrentSkipListMap<br>优点是快速查找, 空间换时间, 随机分布, 最底层维护了跳表内的所有元素. </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;同步控制&quot;&gt;&lt;a href=&quot;#同步控制&quot; class=&quot;headerlink&quot; title=&quot;同步控制&quot;&gt;&lt;/a&gt;同步控制&lt;/h2&gt;&lt;h3 id=&quot;重入锁ReentrantLock&quot;&gt;&lt;a href=&quot;#重入锁ReentrantLock&quot; class=&quot;head</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="java" scheme="https://lejingw.github.io/tags/java/"/>
    
    <category term="concurrency" scheme="https://lejingw.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Java高并发-1并行程序设计的基本方法</title>
    <link href="https://lejingw.github.io/2016/12/16/2016-12-16-Java%E9%AB%98%E5%B9%B6%E5%8F%91-1%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95/"/>
    <id>https://lejingw.github.io/2016/12/16/2016-12-16-Java%E9%AB%98%E5%B9%B6%E5%8F%91-1%E5%B9%B6%E8%A1%8C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95/</id>
    <published>2016-12-16T05:58:58.000Z</published>
    <updated>2020-10-09T05:56:46.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并行程序的基本认识"><a href="#并行程序的基本认识" class="headerlink" title="并行程序的基本认识"></a>并行程序的基本认识</h2><h3 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h3><ol><li>同步(Synchronous) 和 异步(Asynchronous)</li><li>并发(Concurrency) 和 并行(Parallelism)<br> 并发侧重于多个任务<strong>交替</strong>执行,而多个任务之间有可能还是<strong>串行</strong>的, 即<strong>串行并发</strong><br> 并行是真正意义上的<strong>同时执行</strong></li><li>临界区<br> 公共资源或共享数据</li><li>阻塞(Blocking) 和 非阻塞(Non-Blocking)</li><li>死锁(Deadlock), 饥饿(Starvation)和活锁(Livelock)<br> 饥饿指一个或多个线程因种种原因无法获得所需要的资源, 导致一直无法执行. 比如优先级太低, 或者其他线程长时间占用资源等<br> 活锁指资源不断在两个线程中跳动, 而没有一个线程可以同时拿到所有资源而正常执行</li></ol><h3 id="并发级别"><a href="#并发级别" class="headerlink" title="并发级别"></a>并发级别</h3><ol><li>阻塞(Blocking)<br> synchronized或者重入锁, 都会试图在执行后续代码前, 得到临界区的锁</li><li>无饥饿(Starvation-Free)<br>如果锁是公平的, 满足先来后到, 那么就不会产生饥饿</li><li>无障碍(Obstruction-Free)<br> 不会因为临界区的问题导致一方被挂起.  <blockquote><p>一种可行的无障碍实现可以依赖一个<strong>一致性标记</strong>来实现. 线程在操作之前, 先读取并保存这个标记, 在操作完成之后, 再次读取, 检查这个标记是否被更改过, 如果两者一致, 则说明资源访问没有冲突. 如果不一致, 则说明资源在操作过程中与其他线程冲突, 需要重试操作. 而任何对资源有修改操作的线程, 在修改数据前, 都需要更新这个一致性标记, 表示数据不安全.</p></blockquote></li><li>无锁(Lock-Free)  <blockquote><p>要求有一个线程可以在有限步之内完成操作. 在无锁调用中, 一个典型的特点是可能会包含一个无穷循环</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!atomicVar.compareAndSet(localVar, localVar + <span class="number">1</span>)) &#123;</span><br><span class="line">    localVar = atomicVar.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>无等待(Wait-Free)</li></ol><h2 id="两个重要的并行性能评估定律"><a href="#两个重要的并行性能评估定律" class="headerlink" title="两个重要的并行性能评估定律"></a>两个重要的并行性能评估定律</h2><h3 id="Amdahl定律"><a href="#Amdahl定律" class="headerlink" title="Amdahl定律"></a>Amdahl定律</h3><p>Amdahl定义了串行系统并行化后的加速比计算公式和理论上限.<br><code>加速比 = 优化前系统耗时 / 优化后系统耗时</code><br><img src="http://ww4.sinaimg.cn/large/006y8lVagw1faraxilsrbj30nq0pe765.jpg"></p><h3 id="Gustafson-定律"><a href="#Gustafson-定律" class="headerlink" title="Gustafson 定律"></a>Gustafson 定律</h3><p><img src="http://ww4.sinaimg.cn/large/006y8lVagw1farb59yp2gj30ts0qiwgu.jpg"></p><h3 id="Amdahl定律和Gustafson定律是否相互矛盾"><a href="#Amdahl定律和Gustafson定律是否相互矛盾" class="headerlink" title="Amdahl定律和Gustafson定律是否相互矛盾"></a>Amdahl定律和Gustafson定律是否相互矛盾</h3><p>Amdahl强调:当串行比例一定时, 加速比是有上限的, 不过推叠多少个CPU</p><p>Gustafson关心的是:如果可被并行化的代码所占比例足够多, 那么加速比就能随CPU的数量线性增长</p><h2 id="Java内存模型JMM"><a href="#Java内存模型JMM" class="headerlink" title="Java内存模型JMM"></a>Java内存模型JMM</h2><ol><li>原子性(Atomicity)<blockquote><p>32位系统中long型数据的读写不是原子性的</p></blockquote></li><li>可见性(Visibility)  <ul><li>缓存优化</li><li>硬件优化</li><li>指令重排</li><li>编译器的优化</li></ul></li><li>有序性(Ordering)</li></ol><h3 id="哪些指令不能重排-Happen-Before规则"><a href="#哪些指令不能重排-Happen-Before规则" class="headerlink" title="哪些指令不能重排:Happen-Before规则"></a>哪些指令不能重排:Happen-Before规则</h3><p>一条指令的执行可以分为很多步骤, 主要有:</p><ol><li>取指 IF</li><li>译码和取寄存器操作数 ID</li><li>执行或者有效地址计算 EX</li><li>存储器访问 MEM</li><li>写回 WB</li></ol><p>使用<strong>流水线技术</strong>来执行指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指令1  IF   ID   EX   MEM  WB</span><br><span class="line">指令2       IF   ID   EX   MEM  WB</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; b + c</span><br><span class="line">d &#x3D; e - f</span><br></pre></td></tr></table></figure><p>重排序前<br><img src="http://ww1.sinaimg.cn/large/006y8lVagw1farc6vu5a0j30x00fmmz0.jpg"><br>重排序后<br>将<code>LW Re, e</code> 和 <code>LW Rf, f</code>移动到前面执行</p><p><img src="http://ww3.sinaimg.cn/large/006y8lVagw1farc7grdbtj30xs0jm76c.jpg"></p><h2 id="并行程序容易引发的错误和误用"><a href="#并行程序容易引发的错误和误用" class="headerlink" title="并行程序容易引发的错误和误用"></a>并行程序容易引发的错误和误用</h2><p>重排序基本原则:</p><ol><li>程序顺序原则: 一个线程内包装语义的串行性</li><li>volatile规则: volatile变量的写, 先发生于读, 保证了volatile变量的可见性</li><li>锁规则:解锁(unlock)必然发生在随后的加锁(lock)前</li><li>传递性:A先于, B先于C, 那么A必然先于C</li><li>线程的start()方法先于它的每一个动作</li><li>线程的中断(interrupt())先于被中断线程的代码</li><li>对象的构造函数执行,结束先于finalize()方法</li></ol><h2 id="Java并行程序基础"><a href="#Java并行程序基础" class="headerlink" title="Java并行程序基础"></a>Java并行程序基础</h2><h3 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void Thread.interrupt()&#x2F;&#x2F;线程中断</span><br><span class="line">public boolean Thread.isInterrupted()&#x2F;&#x2F;判断是否被中断</span><br><span class="line">public static boolean Thread.interrupted()      &#x2F;&#x2F;判断是否被中断, 并清除当前中断状态</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>Thread.currentThread().isInterrupted()</code>方法判断是否被中断, 默认情况中断不会发生异常.<br>当线程正在<code>wait()</code>或者<code>sleep()</code>时, 若发生了中断, 则会跑出IterruptedException异常.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread() &#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(Thread.currentThread().isInterrupted())<span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">        <span class="comment">//sleep()方法由于中断而抛出异常, 此时它会清除中断标记, 故在异常处理中再次设置中断标记位</span></span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">      &#125;</span><br><span class="line">      Thread.yield();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="等待-wait-和通知-notify"><a href="#等待-wait-和通知-notify" class="headerlink" title="等待(wait)和通知(notify)"></a>等待(wait)和通知(notify)</h3><p>这两个方法属于Object类, 当线程A中, 调用obj.wait()时, 那么线程A就会停止继续执行, 转为等待状态. 线程A会一直等到其他线程调用了obj.notify()方法为止.</p><p>notify()方法从对象的等待列队里, 随机选择唤起的线程, 这个选择是不公平的.<br>notifyAll()方法会唤醒所有等待的线程.<br>wait()和notify()都需要先获取obj的监视器, 调用完毕后释放监视器.</p><h3 id="挂起-suspend-和继续执行-resume-线程"><a href="#挂起-suspend-和继续执行-resume-线程" class="headerlink" title="挂起(suspend)和继续执行(resume)线程"></a>挂起(suspend)和继续执行(resume)线程</h3><p><strong>废弃方法</strong>, suspend不会释放任何锁资源</p><h3 id="等待线程结束-join-和谦让-yield"><a href="#等待线程结束-join-和谦让-yield" class="headerlink" title="等待线程结束(join)和谦让(yield)"></a>等待线程结束(join)和谦让(yield)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure><h3 id="守护线程-Daemon"><a href="#守护线程-Daemon" class="headerlink" title="守护线程(Daemon)"></a>守护线程(Daemon)</h3><p>守护线程要守护的对象(用户线程)不存在了, 那么整个应用就自然结束了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread.setDaemon(true);&#x2F;&#x2F;在start()方法前设置</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>max(10), normal(5), min(0)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;并行程序的基本认识&quot;&gt;&lt;a href=&quot;#并行程序的基本认识&quot; class=&quot;headerlink&quot; title=&quot;并行程序的基本认识&quot;&gt;&lt;/a&gt;并行程序的基本认识&lt;/h2&gt;&lt;h3 id=&quot;几个概念&quot;&gt;&lt;a href=&quot;#几个概念&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="java" scheme="https://lejingw.github.io/tags/java/"/>
    
    <category term="concurrency" scheme="https://lejingw.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Java高并发-目录</title>
    <link href="https://lejingw.github.io/2016/12/15/2016-12-15-Java%E9%AB%98%E5%B9%B6%E5%8F%91-%E7%9B%AE%E5%BD%95/"/>
    <id>https://lejingw.github.io/2016/12/15/2016-12-15-Java%E9%AB%98%E5%B9%B6%E5%8F%91-%E7%9B%AE%E5%BD%95/</id>
    <published>2016-12-15T04:11:24.000Z</published>
    <updated>2020-10-09T05:56:46.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-并行程序设计的基本方法"><a href="#1-并行程序设计的基本方法" class="headerlink" title="1. 并行程序设计的基本方法"></a>1. 并行程序设计的基本方法</h2><ol><li><p>并行程序的基本认识</p></li><li><p>两个重要的并行性能评估定律</p></li><li><p>Java内存模型JMM</p></li><li><p>并行程序容易引发的错误和误用</p></li></ol><h2 id="2-JDK对并行程序的支持"><a href="#2-JDK对并行程序的支持" class="headerlink" title="2. JDK对并行程序的支持"></a>2. JDK对并行程序的支持</h2><p>JUC(java.util.concurrent)中一些工具的使用方法,特点,及内部实现原理</p><h2 id="3-锁优化和提高并发性能方法和思路"><a href="#3-锁优化和提高并发性能方法和思路" class="headerlink" title="3. 锁优化和提高并发性能方法和思路"></a>3. 锁优化和提高并发性能方法和思路</h2><ol><li>锁优化</li></ol><ol start="2"><li>虚拟机层面对并行程序的优化支持</li></ol><ol start="3"><li>无锁计算</li></ol><h2 id="4-并行的设计模式-和-java8对此的支持和改进"><a href="#4-并行的设计模式-和-java8对此的支持和改进" class="headerlink" title="4. 并行的设计模式 和 java8对此的支持和改进"></a>4. 并行的设计模式 和 java8对此的支持和改进</h2><ol><li>并行程序中常见的设计模式</li></ol><ol start="2"><li>典型的并行算法和使用方法</li><li>Java NIO 和 AIO</li><li>java8中的并行流</li><li>CompletableFuture,StampedLock和LongAdder</li></ol><h2 id="5-高并发框架Akka"><a href="#5-高并发框架Akka" class="headerlink" title="5. 高并发框架Akka"></a>5. 高并发框架Akka</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-并行程序设计的基本方法&quot;&gt;&lt;a href=&quot;#1-并行程序设计的基本方法&quot; class=&quot;headerlink&quot; title=&quot;1. 并行程序设计的基本方法&quot;&gt;&lt;/a&gt;1. 并行程序设计的基本方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;并行程序的基本认识&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="java" scheme="https://lejingw.github.io/tags/java/"/>
    
    <category term="concurrency" scheme="https://lejingw.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>How To Use Hexo</title>
    <link href="https://lejingw.github.io/2016/12/08/2016-12-08-how-to-use-hexo/"/>
    <id>https://lejingw.github.io/2016/12/08/2016-12-08-how-to-use-hexo/</id>
    <published>2016-12-08T05:12:16.000Z</published>
    <updated>2020-10-09T05:56:46.617Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post.<br>Check <a href="https://hexo.io/docs/">documentation</a> for more info.<br>If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><a id="more"></a>  <p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p><h2 id="short-expression"><a href="#short-expression" class="headerlink" title="short expression"></a>short expression</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo s</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h2 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h2><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">Layout</th><th>path</th></tr></thead><tbody><tr><td align="center">post</td><td>source/_posts</td></tr><tr><td align="center">page</td><td>source</td></tr><tr><td align="center">draft</td><td>source/_drafts</td></tr></tbody></table><blockquote><p>drafts are not displayed by default. you can add <code>--draft</code> option when running Hexo or enable the <code>render_drafts</code> setting in <code>_config.yml</code> to render drafts.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.&lt;br&gt;Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info.&lt;br&gt;If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="other" scheme="https://lejingw.github.io/categories/other/"/>
    
    
    <category term="hexo" scheme="https://lejingw.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列-晚期(运行期)优化</title>
    <link href="https://lejingw.github.io/2016/10/14/2016-10-14-JVM%E7%B3%BB%E5%88%97-%E6%99%9A%E6%9C%9F-%E8%BF%90%E8%A1%8C%E6%9C%9F-%E4%BC%98%E5%8C%96/"/>
    <id>https://lejingw.github.io/2016/10/14/2016-10-14-JVM%E7%B3%BB%E5%88%97-%E6%99%9A%E6%9C%9F-%E8%BF%90%E8%A1%8C%E6%9C%9F-%E4%BC%98%E5%8C%96/</id>
    <published>2016-10-14T01:44:37.000Z</published>
    <updated>2020-10-09T05:56:46.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HotSpot虚拟机内的即时编译器"><a href="#HotSpot虚拟机内的即时编译器" class="headerlink" title="HotSpot虚拟机内的即时编译器"></a>HotSpot虚拟机内的即时编译器</h2><h3 id="解释器与编译器"><a href="#解释器与编译器" class="headerlink" title="解释器与编译器"></a>解释器与编译器</h3><p>HotSpot虚拟机中内置了两个及时编译器, 分别为Client Compiler(C1编译器 -client)和Server Compiler(C2编译器 -server)<br>-Xint 强制虚拟机运行于解释模式(Interpreted Mode)<br>-Xcomp 强制虚拟机运行于编译模式(Compiled Mode)  </p><p>JDK1.7 开始默认采用分层编译(Tiered Compilation)策略, 实施分层编译后,Client Compiler 和 Server Compiler 将会同时工作, 许多代码可能会被多次编译, 用C1获取更高的编译速度, 用C2获取更好的编译质量, 在解释器执行的时候无需再承担收集性能监控信息的任务.</p><h3 id="编译对象与触发条件"><a href="#编译对象与触发条件" class="headerlink" title="编译对象与触发条件"></a>编译对象与触发条件</h3><p>热点代码有两类, 被多次滴啊用的方法 和 被多次执行的循环体(发生在方法执行过程中, 也被称为栈上替换OSR编译, On Stack Replacement).</p><p>热点探测(Hot Spot Detection), 判定方式:</p><ul><li>基于采样的热点探测(Sample Based Hot Spot Detection)<blockquote><p>周期性的检查各个线程的栈顶, 如果发现某个或某些方法经常出现在栈顶,则这个方法就是热点方法</p></blockquote></li><li>基于计数器的热点探测(Counter Based Hot Spot Detection)<blockquote><p>采用这种方法的虚拟机, 会为每个方法(甚至是代码块)建立计数器, 统计方法*<strong>某一段时间内**<em>的执行次数, 如果执行次数超过一定的阈值, 就认为该方法是热点方法. 当超过一定的时间限度, 如果方法的调用次数任然不足, 那这个方法的调用计数器就会被</em></strong>减少一半*<strong>, 这个过程被称为**<em>计数器热度的衰减</em></strong>(Counter Decay).</p></blockquote></li><li>基于踪迹的热点探测(Trace)<blockquote><p>像FireFox中的TraceMonkey和Dalvik中新的JIT编译器dou都使用这种方式</p></blockquote></li></ul><p><strong>HotSpot虚拟机使用基于计数器的热点探测</strong><br>在C1模式下默认阈值是1500次, 在C2模式下是1000, 可以通过参数<code>-XX:CompileThreshold</code>来设定<br>通过<code>-XX:-UseCounterDecay</code>来关闭热度衰减, 让方法计数器统计方法调用的绝对次数, 使用<code>-XX:CounterHalfLifeTime</code>设置半衰周期的时间, 单位是秒.  </p><p><strong><em>并不能使用<code>-XX:BackEdgeThreshold</code>设置回边计数器的阈值</em></strong>, 可以通过<code>-XX:OnStackReplacePercentage</code>来间接设置, 计算公式如下:</p><ul><li>C1模式下:<br>  方法调用计数器阈值(CompileThreshold) * OSR比率(OnStackReplacePercentage) / 100</li><li>C2模式下:<br>  方法调用计数器阈值(CompileThreshold) *  (OSR比率(OnStackReplacePercentage) - 解释器监控比率(InterpreterProfilePercentage)) / 100</li></ul><blockquote><p>其中OnStackReplacePercentage默认值为140, InterpreterProfilePercentage默认值为33, 如果都取默认值, 那Server模式虚拟机回边计数器的阈值为10700.</p></blockquote><p>Client VM的及时编译方式如下:<br><img src="http://ww4.sinaimg.cn/orj480/801b780agw1f8n0rh2evsj20n60n875s.jpg"><br><img src="http://ww4.sinaimg.cn/orj480/801b780agw1f8n0pu6d6kj20ku0pa75u.jpg">  </p><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>默认设置下, 无论方法调用产生的及时编译请求还是OSR编译请求, 虚拟机在代码编译器还未完成之前,都继续按照解释方式执行, 而编译动作在后台的编译线程中进行. 通过<code>-XX:-BackgroundCompilation</code>来禁止后台编译.</p><h2 id="编译优化技术"><a href="#编译优化技术" class="headerlink" title="编译优化技术"></a>编译优化技术</h2><h3 id="编译优化技术概览"><a href="#编译优化技术概览" class="headerlink" title="编译优化技术概览"></a>编译优化技术概览</h3><p><img src="http://ww4.sinaimg.cn/orj480/801b780agw1f8n9olggsqj20ps0kwgpw.jpg"><br><img src="http://ww1.sinaimg.cn/orj480/801b780agw1f8n9ommszvj20qi0w20zu.jpg"></p><h3 id="经典优化技术"><a href="#经典优化技术" class="headerlink" title="经典优化技术"></a>经典优化技术</h3><ol><li>公共子表达式消除</li><li>数组边界检查消除(Array Bounds Checking Elimination)</li><li>方法内敛<br> java对象的方法默认是虚方法, 为了解决虚方法的内联问题, 引入了”类继承关系分析”(Class Hierarchy Analysis, CHA)的技术, 用于判断目前已加载的类中是否有存在多于一种的实现, 如果只有一种则进行内联, 此时预留一个”逃生门”(守护内联), 若后续的类加载过程了导致有多种实现, 则放弃已编译的代码, 退回到解释状态执行, 或者重新编译<br> 如果有多个版本的目标方法可供选择, 使用内联缓存(Inline Cache)来完成方法内联<blockquote><p><em>方法内联:当第一次发生调用之后, 缓存记录下方法接收者的版本信息, 并且每次方法调用都比较接收者版本, 如果一致, 则内联可以一直使用.如果不一致, 则取消内联, 查找虚方法表进行方法分派</em></p></blockquote></li><li>逃逸分析(Escape Analysis)<br> 若非方法逃逸和非线程逃逸,则可以进行:  <ul><li>栈上分配(Stack Allocation)<br>  对象空间在栈上分配, 随栈帧退出而销毁, <strong><em>HotSpot目前的实现方式导致实现较为复杂,目前还不支栈上分配持</em></strong></li><li>同步消除(Synchronization Elimination)</li><li>标量替换(Scalar Replacement)<br>  标量(Scalar)是指一个数据无法再分解成更小的单位, 相对于聚合量(aggregate<br>)<br>  标量替换表示将**<em>对象消除使用java的原始数据类型**</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+DoEscapeAnalysis 开启逃逸分析</span><br><span class="line">-XX:+EliminateAllocations 开启标量替换</span><br><span class="line">-XX:+EliminateLocks 开启同步消除</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HotSpot虚拟机内的即时编译器&quot;&gt;&lt;a href=&quot;#HotSpot虚拟机内的即时编译器&quot; class=&quot;headerlink&quot; title=&quot;HotSpot虚拟机内的即时编译器&quot;&gt;&lt;/a&gt;HotSpot虚拟机内的即时编译器&lt;/h2&gt;&lt;h3 id=&quot;解释器与编</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="jvm" scheme="https://lejingw.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列-早期(运行期)优化</title>
    <link href="https://lejingw.github.io/2016/10/09/2016-10-09-JVM%E7%B3%BB%E5%88%97-%E6%97%A9%E6%9C%9F-%E8%BF%90%E8%A1%8C%E6%9C%9F-%E4%BC%98%E5%8C%96/"/>
    <id>https://lejingw.github.io/2016/10/09/2016-10-09-JVM%E7%B3%BB%E5%88%97-%E6%97%A9%E6%9C%9F-%E8%BF%90%E8%A1%8C%E6%9C%9F-%E4%BC%98%E5%8C%96/</id>
    <published>2016-10-09T07:31:27.000Z</published>
    <updated>2020-10-09T05:56:46.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javac编译过程"><a href="#javac编译过程" class="headerlink" title="javac编译过程"></a>javac编译过程</h2><table><thead><tr><th align="right">步骤</th><th>方法</th><th>备注</th></tr></thead><tbody><tr><td align="right">准备过程</td><td>initProcessAnnotations</td><td>初始化插入式注解处理器</td></tr><tr><td align="right">1.1</td><td>parseFiles</td><td>词法分析, 语法分析</td></tr><tr><td align="right">1.2</td><td>enterTrees</td><td>输入到符号表</td></tr><tr><td align="right">2</td><td>processAnnotations</td><td>执行注解处理</td></tr><tr><td align="right">3.1</td><td>attribute</td><td>标注</td></tr><tr><td align="right">3.2</td><td>flow</td><td>数据流分析</td></tr><tr><td align="right">3.3</td><td>desugar</td><td>解语法糖</td></tr><tr><td align="right">3.4</td><td>generate</td><td>生成字节码</td></tr></tbody></table><h2 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h2><p>jdk1.6实现了<strong>JSR-269</strong>, 提供了一组插入式注解处理器的标注API对在编译期间对注解进行处理,如果处理注解期间对语法树进行了修改,编译器将<strong>回到解析及填充符号表的过程重新处理</strong>, 每次循环称为一个round,直到所有插入式注解处理器都没有再对语法树进行修改为止.</p><p>如果有新的注解处理器需要执行, 通过zhu’jie通过com.sun.tools.javac.processing.JavacProcessingEnvironment 的doProcessing()方法, 生成一个新的JavaCompiler对象对编译的后续步骤进行处理.</p><h2 id="语义分析与字节码生成"><a href="#语义分析与字节码生成" class="headerlink" title="语义分析与字节码生成"></a>语义分析与字节码生成</h2><p>语义分析分为: 标注检查 和 数据及控制流分析</p><h3 id="标注检查attribute"><a href="#标注检查attribute" class="headerlink" title="标注检查attribute()"></a>标注检查attribute()</h3><p>检查变量是否声明, 变量与赋值的数据类型是否匹配等.</p><blockquote><p>常量折叠</p></blockquote><h3 id="数据及控制流分析"><a href="#数据及控制流分析" class="headerlink" title="数据及控制流分析"></a>数据及控制流分析</h3><h2 id="解语法糖"><a href="#解语法糖" class="headerlink" title="解语法糖"></a>解语法糖</h2><p>语法糖(Syntactic Sugar), 泛型, 变长参数,  自动装拆箱, 条件编译等.</p><h2 id="字节码生成"><a href="#字节码生成" class="headerlink" title="字节码生成"></a>字节码生成</h2><p>添加实例构造器<init>()方法 和 类构造器<clinit>()方法到语法树中. 把语句块, 变量初始化, 调用父类的实例构造器等操作收敛到<init>()和<clinit>之中.</p><blockquote><p>此处的实例构造器<init>()并非默认构造器(默认构造器在填充符号表阶段已完成)</p></blockquote><h2 id="编译器插件"><a href="#编译器插件" class="headerlink" title="编译器插件"></a>编译器插件</h2><p>自定义AbstractProcessor, 如果不改变语法树的内容, 则process方法返回false即可, 代表无须构建新的JavaCompiler.</p><p>配合Annotations使用:</p><ol><li>@SupportedAnnotationTypes(“*”)</li><li>@SupportedSourceVersion(SourceVersion.RELEASE_6)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;javac编译过程&quot;&gt;&lt;a href=&quot;#javac编译过程&quot; class=&quot;headerlink&quot; title=&quot;javac编译过程&quot;&gt;&lt;/a&gt;javac编译过程&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;right&quot;&gt;步骤&lt;/th</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="jvm" scheme="https://lejingw.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列-字节码执行引擎</title>
    <link href="https://lejingw.github.io/2016/10/08/2016-10-08-JVM%E7%B3%BB%E5%88%97-%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/"/>
    <id>https://lejingw.github.io/2016/10/08/2016-10-08-JVM%E7%B3%BB%E5%88%97-%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</id>
    <published>2016-10-08T06:23:15.000Z</published>
    <updated>2020-10-09T05:56:46.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">            当 前程 线</span><br><span class="line"></span><br><span class="line">+-------------------------------------+</span><br><span class="line">| +-----------|当前栈帧|------------+ |</span><br><span class="line">| | +----------------------------+  | |</span><br><span class="line">| | |         局部变量表         |  | |</span><br><span class="line">| | |     Local Variable Table   |  | |</span><br><span class="line">| | |                            |  | |</span><br><span class="line">| | +----------------------------+  | |</span><br><span class="line">| | +----------------------------+  | |</span><br><span class="line">| | |          操作数栈           |  | |</span><br><span class="line">| | |       Operand Stack        |  | |</span><br><span class="line">| | |                            |  | |</span><br><span class="line">| | +----------------------------+  | |</span><br><span class="line">| | +----------------------------+  | |</span><br><span class="line">| | |          动态连接          |  | |</span><br><span class="line">| | |       Dynamic Linking      |  | |</span><br><span class="line">| | |                            |  | |</span><br><span class="line">| | +----------------------------+  | |</span><br><span class="line">| | +----------------------------+  | |</span><br><span class="line">| | |           返回地址         |  | |</span><br><span class="line">| | +----------------------------+  | |</span><br><span class="line">| |            ... ...              | |</span><br><span class="line">| |                                 | |</span><br><span class="line">| +---------------------------------+ +</span><br><span class="line">| +---------------------------------+ |</span><br><span class="line">| |             栈帧n               | |</span><br><span class="line">| |                                 | |</span><br><span class="line">| +---------------------------------+ |</span><br><span class="line">|              ... ...                |</span><br><span class="line">| +---------------------------------+ |</span><br><span class="line">| |             栈帧2               | |</span><br><span class="line">| |                                 | |</span><br><span class="line">| +---------------------------------+ |</span><br><span class="line">| +---------------------------------+ |</span><br><span class="line">| |                                 | |</span><br><span class="line">| |             栈帧1               | |</span><br><span class="line">| +---------------------------------+ |</span><br><span class="line">+-------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h3><p>Java虚拟机的解释执行引擎称为”基于栈的执行引擎”,其中的栈就是指操作数栈</p><h3 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h3><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>在编译时就确定下来的方法调用,称为解析,”编译器可知,运行期不可变”, 对应的字节码指令有:<br>| 指令 | 说明 |<br>|—-|–|<br>| invokestatic | 调用静态方法 |<br>| invokespecial | 调用实例构造器<init>方法,私有方法和父类方法 |<br>| invokevirtual | 调用所有的虚方法 |<br>| invokeinterface | 调用接口方法,会在运行时确定一个实现此接口的对象 |<br>| innnvokedynamic | 先在运行时<strong>动态解析</strong>出调用点限定符所引用的方法,然后在执行该方法|</p><blockquote><p>在此之前的4条调用指令,分派逻辑是固化在java虚拟机内部的,而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的</p></blockquote><blockquote><p>非虚方法处理使用invokestatic和invokespecial调用的方法之外还有一种,就是被final修饰的方法. final虽然用invokevirtual指令来代用,但在java语言规范中明确说明了final方法是一种非虚方法.</p></blockquote><h3 id="分派"><a href="#分派" class="headerlink" title="分派"></a>分派</h3><ol><li>静态分派<br> javac编译器会根据参数的静态类型决定使用哪个重载版本,所有依赖静态类型来定位方法执行版本的分派动作称为静态分派. 静态分派的典型应用是方法重载.</li><li>动态分派<br> 重写</li><li>单分派与多分派<br> 方法的接收者与方法的参数统称为方法的宗量.<br> 单分派是根据一个宗量对目标方法进行选择.<br> 多分派是根据多于一个宗量对目标方法进行选择.</li><li>至1.7java语言还是属于一门静态多分派,动态单分派的语言</li><li>虚拟机动态分派的实现<br> 实际实现采用了虚拟方法表vtable(vritual Method Table),<br> 对应的invokeinterface采用itable(Interface Method Table)<br> 来替换元数据查找以提高性能<blockquote><p>上述方法表是”稳定优化”的手段,在条件允许的情况下,此外还有非稳定的”激进优化”,使用内联缓存(Inline Cache) 和 基于”类型继承关系分析”(Class Hierarchy Analysis, CHA)技术的守护内联(Guarded Inlining)</p></blockquote></li></ol><h3 id="动态类型语言支持"><a href="#动态类型语言支持" class="headerlink" title="动态类型语言支持"></a>动态类型语言支持</h3><blockquote><p>什么是动态类型语言? 类型检查的主题过程是在运行期而不是编译器.</p></blockquote><p>jdk1.7实现了JSR-292, 新加入了java.lang.invoke包, 提供了一种新的动态确定目标方法的机制,称为MethodHandle.</p><ul><li>Reflection是模拟java代码层次的方法调用, 而MethodHandle模拟字节码层次的方法调用</li><li>Reflection中的java.lang.reflect.Method对象远比java.lang.invoke.MethodHandle对象所包含的信息多. 前者包含了方法的签名,描述符以及方法属性表中各种属性的java一端的全面映像,还包含执行权限等信息. 而MethodHandle只包含于执行该方法相关的信息, 是轻量级的, 而前者是重量级的.</li><li>MethodHandle是对字节码的方法指令调用的模拟,理论上支持这方面的各种优化(如方法内联), 而反射则不行.</li><li>Reflection站在java语言的角度看,只为java语言服务的. 而MethodHandle被设计成可服务于所有java虚拟机之上的语言.</li></ul><h2 id="基于栈的字节码解释执行引擎"><a href="#基于栈的字节码解释执行引擎" class="headerlink" title="基于栈的字节码解释执行引擎"></a>基于栈的字节码解释执行引擎</h2><p>基于栈的指令集机构,优点是ke’yi’zhi可移植,确定是执行速度相对慢一些, 由于指令数量和内存访问的原因. 出栈入栈本身产生了相当多的指令数量,栈实现在内存中.</p><blockquote><p>android平台的Dalvik VM是基于寄存器的虚拟机</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;运行时栈帧结构&quot;&gt;&lt;a href=&quot;#运行时栈帧结构&quot; class=&quot;headerlink&quot; title=&quot;运行时栈帧结构&quot;&gt;&lt;/a&gt;运行时栈帧结构&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="jvm" scheme="https://lejingw.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列-锁优化</title>
    <link href="https://lejingw.github.io/2016/10/05/2016-10-05-JVM%E7%B3%BB%E5%88%97-%E9%94%81%E4%BC%98%E5%8C%96/"/>
    <id>https://lejingw.github.io/2016/10/05/2016-10-05-JVM%E7%B3%BB%E5%88%97-%E9%94%81%E4%BC%98%E5%8C%96/</id>
    <published>2016-10-05T02:35:07.000Z</published>
    <updated>2020-10-09T05:56:46.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适应性自旋-Adaptive-Spinning"><a href="#适应性自旋-Adaptive-Spinning" class="headerlink" title="适应性自旋(Adaptive Spinning)"></a>适应性自旋(Adaptive Spinning)</h2><p>互斥同步对性能最大的影响是阻塞的实现, 挂起线程和恢复线程的操作都需要转入内核态中完成, 该并发性能带来很大的压力.   短暂的等待, 并不放弃CPU的执行时间. 使用<code>-XX:+UseSpinning</code> 参数开启(jdk1.6后默认开启), 使用<code>-XX:PreBlockSpin</code>来设置自旋的次数(默认10次).</p><p>自适应自旋:由前一次在同一个锁上的自旋时间及锁的拥有者状态来决定.</p><h2 id="锁消除-Lock-Elimination"><a href="#锁消除-Lock-Elimination" class="headerlink" title="锁消除(Lock Elimination)"></a>锁消除(Lock Elimination)</h2><p>根据逃逸分析,判断一段代码中, 堆上的所有数据都不会逃逸出去从而被其他线程访问到, 则任务是线程私有的, 同步加锁无需进行.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public String appendStr(String a, String b, String c)&#123;</span><br><span class="line">    return a+b+c;</span><br><span class="line">&#125;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&gt;</span><br><span class="line">public String appendStr(String a, String b, String c)&#123;</span><br><span class="line">    StringBuffer sb &#x3D; new StringBuffer(a);</span><br><span class="line">    sb.append(b).append(c);</span><br><span class="line">    return sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="锁粗化-Lock-Coarsening"><a href="#锁粗化-Lock-Coarsening" class="headerlink" title="锁粗化(Lock Coarsening)"></a>锁粗化(Lock Coarsening)</h2><p>一系列连续的操作对同一个对象反复的加锁解锁,甚至加锁操作出现在循环体中, 频繁的互斥同步操作导致不必要的性能损耗.</p><h2 id="轻量级锁-Lightweight-Locking"><a href="#轻量级锁-Lightweight-Locking" class="headerlink" title="轻量级锁(Lightweight Locking)"></a>轻量级锁(Lightweight Locking)</h2><p>对象头包含两/三部分:</p><ul><li>Mark World<ul><li>HashCode</li><li>GC分代年龄(Generational<br>GC Age)等</li></ul></li><li>指向方法去对象类型数据的指针</li><li>数组长度(数组类型独有)</li></ul><table><thead><tr><th>存储内容</th><th align="center">标志位</th><th>状态</th></tr></thead><tbody><tr><td>对象哈希码、对象分代年龄</td><td align="center">01</td><td>未锁定</td></tr><tr><td>指向锁记录的指针</td><td align="center">00</td><td>轻量级锁定</td></tr><tr><td>指向重量级锁的指针</td><td align="center">10</td><td>膨胀(重量级锁定)</td></tr><tr><td>空，不需要记录信息</td><td align="center">11</td><td>GC标记</td></tr><tr><td>偏向线程ID、偏向时间戳、对象分代年龄</td><td align="center">01</td><td>可偏向</td></tr></tbody></table><h2 id="偏向锁-Biased-Locking"><a href="#偏向锁-Biased-Locking" class="headerlink" title="偏向锁(Biased Locking)"></a>偏向锁(Biased Locking)</h2><blockquote><p>理由依据:”绝大部分的锁,在整个同步周期内都是不存在竞争的”. 如果没有竞争, 轻量级锁使用CAS操作避免了使用互斥量的开销,但如果存在锁竞争,除了互斥量的开销外,还额外发了CAS操作, <strong><em>因此在有竞争的情况下,轻量级锁比传统的重量级锁更慢</em></strong></p></blockquote><blockquote><p><strong><em>偏向锁可以提高带有同步但无竞争的程序性能</em></strong>, 如果程序中大多数的锁总是被多个不同的线程访问,那偏向模式就是多余的. 可以通过<code>-XX:-UseBiasedLocking</code>(JDK1.6默认开启)禁用偏向锁优化来提高性能.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;适应性自旋-Adaptive-Spinning&quot;&gt;&lt;a href=&quot;#适应性自旋-Adaptive-Spinning&quot; class=&quot;headerlink&quot; title=&quot;适应性自旋(Adaptive Spinning)&quot;&gt;&lt;/a&gt;适应性自旋(Adaptive S</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="jvm" scheme="https://lejingw.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>JVM系列-内存分配</title>
    <link href="https://lejingw.github.io/2016/09/30/2016-09-30-JVM%E7%B3%BB%E5%88%97-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    <id>https://lejingw.github.io/2016/09/30/2016-09-30-JVM%E7%B3%BB%E5%88%97-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</id>
    <published>2016-09-30T09:02:15.000Z</published>
    <updated>2020-10-09T05:56:46.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存划分"><a href="#内存划分" class="headerlink" title="内存划分"></a>内存划分</h2><p>在jvm规范中, 内存大致可以划分为以下6大部分:</p><ul><li><p>PC寄存器(线程独有)<br>记载着每个线程当前运行的方法的地址. 支持多线程，线程的阻塞、恢复、挂起等一系列操作. </p><p>如果当前执行的本地方法, 则程序计数器是一个空地址. </p></li><li><p>JAVA虚拟机栈(线程独有)</p><ul><li><p>栈帧<br>栈帧是随着方法的创建而创建，随着方法的结束而销毁.  </p><p>每个栈帧中, 都包含 <em>局部变量表</em> 和 <em>操作数栈</em>  <em>动态链接</em> 和 <em>返回地址</em> 等</p></li><li><p>局部变量表<br>编译时期确定的. 一个对象数组, 第0个局部变量即为<strong>this</strong>.</p></li><li><p>操作数栈<br>后进先出(LIFO)栈, 在编译时期确定其大小. 提供字节码指令操作变量计算的空间.</p></li></ul></li><li><p>JAVA堆(全局共享)<br>储存着所有对象实例以及数组对象. 垃圾收集器的工作对象.</p><blockquote><p>对应jvm如何实现垃圾收集器, jvm规范没有明确规定.</p></blockquote></li><li><p>方法区(全局共享)<br>存储的是 <em>运行时常量池</em>, <em>字段信息</em>, <em>方法信息</em>, <em>构造方法</em> 和 <em>普通函数的字节码内容</em> 以及 <em>一些特殊方法</em></p><blockquote><p>jvm规范不强制要求此区域GC</p></blockquote></li></ul><ul><li>运行时常量池(全局共享)</li><li>本地方法栈(线程独有)<br>用来支持native方法的执行, 随每个线程的启动而创建的.</li></ul><h3 id="创建对象内存分配"><a href="#创建对象内存分配" class="headerlink" title="创建对象内存分配"></a>创建对象内存分配</h3><ol><li>Serial,ParNew等带Compact过程的收集器时，使用指针碰撞(Bump the Pointer)算法，使用CMS这种基于Mark-Sweep算法的收集器时，使用空闲列表(Free List)</li><li>并发分配内存空间并非线程安全的:<ul><li>采用CAS失败重试的方式保证更新操作的原子性</li><li>使用本地线程分配缓冲(Thread Local Allocation Buffer, TLAB)，通过-XX:+/-UseTLAB，只有TLAB用完并分配新的TLAB时，才需要同步锁定</li></ul></li><li>d </li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;内存划分&quot;&gt;&lt;a href=&quot;#内存划分&quot; class=&quot;headerlink&quot; title=&quot;内存划分&quot;&gt;&lt;/a&gt;内存划分&lt;/h2&gt;&lt;p&gt;在jvm规范中, 内存大致可以划分为以下6大部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PC寄存器(线程独有)&lt;br&gt;记载着每个</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="jvm" scheme="https://lejingw.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Docker Usage</title>
    <link href="https://lejingw.github.io/2016/05/23/2016-05-23-Docker-Usage/"/>
    <id>https://lejingw.github.io/2016/05/23/2016-05-23-Docker-Usage/</id>
    <published>2016-05-23T04:04:41.000Z</published>
    <updated>2020-10-09T05:56:46.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Usage"><a href="#Docker-Usage" class="headerlink" title="Docker Usage"></a>Docker Usage</h1><h2 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h2><p>–rm    Automatically remove the container when it exits (incompatible with -d)<br>-d     detached,选择执行-d使container进入后台模式，将无法配合”–rm”参数使用<br>-a    数组[stdin,stdout,stderr],<br>-t    Allocate a pseudo-tty<br>-i    keep STDIN open even if not attached<br>–cidfile    write the container id to the file</p><h3 id="–link-使用"><a href="#–link-使用" class="headerlink" title="–link 使用"></a>–link 使用</h3><p>docker run -d –name redis-name redis<br>docker run –rm –link redis-name:redis_alias –entrypoint /bin/bash  redis -c export</p><blockquote><p>declare -x REDIS_ALIAS_PORT=”tcp://172.17.0.2:6379”<br>declare -x REDIS_ALIAS_PORT_6379_TCP=”tcp://172.17.0.2:6379”<br>declare -x REDIS_ALIAS_PORT_6379_TCP_ADDR=”172.17.0.2”<br>declare -x REDIS_ALIAS_PORT_6379_TCP_PORT=”6379”<br>declare -x REDIS_ALIAS_PORT_6379_TCP_PROTO=”tcp”</p></blockquote><p>docker run -i -t –rm –link redis-name:redis_alias –entrypoint /bin/bash redis -c ‘/usr/local/bin/redis-cli -h $REDIS_ALIAS_PORT_6379_TCP_ADDR -p $REDIS_ALIAS_PORT_6379_TCP_PORT’</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>docker pull mysql<br>docker run -d -p 13306:3306 –env MYSQL_ROOT_PASSWORD=111111 -v /root/val_dir/mysql:/var/lib/mysql –name docker_mysql mysql</p><h2 id="ZeroC-ICE"><a href="#ZeroC-ICE" class="headerlink" title="ZeroC ICE"></a>ZeroC ICE</h2><p><code>https://hub.docker.com/r/zeroc/icegridregistry/</code><br>docker pull zeroc/icegridregistry:3.6.2<br>docker run –name some-icegridregistry -v /path/to/config:/etc/icegridregistry.conf:ro -v /path/to/folder:/var/lib/ice/icegrid -d zeroc/icegridregistry</p><p>docker pull zeroc/icegridnode:3.6.2<br>docker run –name some-icegridnode -v /path/to/config:/etc/icegridnode.conf:ro -v /path/to/folder:/var/lib/ice/icegrid -d zeroc/icegridnode</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-Usage&quot;&gt;&lt;a href=&quot;#Docker-Usage&quot; class=&quot;headerlink&quot; title=&quot;Docker Usage&quot;&gt;&lt;/a&gt;Docker Usage&lt;/h1&gt;&lt;h2 id=&quot;parameter&quot;&gt;&lt;a href=&quot;#para</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="docker" scheme="https://lejingw.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux IO模式</title>
    <link href="https://lejingw.github.io/2016/03/15/2016-03-15-linux-io%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lejingw.github.io/2016/03/15/2016-03-15-linux-io%E6%A8%A1%E5%BC%8F/</id>
    <published>2016-03-15T07:58:54.000Z</published>
    <updated>2020-10-09T05:56:46.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IO模式"><a href="#IO模式" class="headerlink" title="IO模式"></a>IO模式</h1><p>当发生一次read时，会经历两个阶段:</p><ol><li>等待数据准备</li><li>将数据从内核空间拷贝到进程空间</li></ol><p>有这两个阶段，产生了一下五种网络模式:</p><ul><li>阻塞I/O (blocking IO)</li><li>非阻塞I/O (nonblocking IO)</li><li>I/O多路复用 (IO multiplexing)</li><li>信号驱动I/O （signal driven IO)</li><li>异步I/O (asynchronous IO)</li></ul><blockquote><p>注：由于signal driven IO在实际中并不常用，所以我这只提及剩下的四种IO Model。</p></blockquote><h2 id="阻塞I-O-blocking-IO"><a href="#阻塞I-O-blocking-IO" class="headerlink" title="阻塞I/O (blocking IO)"></a>阻塞I/O (blocking IO)</h2><p><img src="/images/io/blocking_io.png" alt="阻塞I/O"></p><h2 id="非阻塞I-O-（nonblocking-IO"><a href="#非阻塞I-O-（nonblocking-IO" class="headerlink" title="非阻塞I/O （nonblocking IO)"></a>非阻塞I/O （nonblocking IO)</h2><p><img src="/images/io/nonblocking_io.png" alt="非阻塞I/O"></p><blockquote><p>nonblocking IO的特点是用户进程需要不断的主动询问kernel数据好了没有。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</p></blockquote><h2 id="I-O多路复用-IO-multiplexing"><a href="#I-O多路复用-IO-multiplexing" class="headerlink" title="I/O多路复用 (IO multiplexing)"></a>I/O多路复用 (IO multiplexing)</h2><p>IO multiplexing就是我们说的select，poll，epoll，有些地方也称这种IO方式为event driven IO。select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select，poll，epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程。</p><p><img src="/images/io/io_multiplexing.png" alt="多路复用I/O"></p><p><strong>当用户进程调用了select，那么整个进程会被block</strong>，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><blockquote><p>所以，I/O 多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符，而这些文件描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。</p></blockquote><h2 id="异步I-O-asynchronous-IO"><a href="#异步I-O-asynchronous-IO" class="headerlink" title="异步I/O (asynchronous IO)"></a>异步I/O (asynchronous IO)</h2><p><img src="/images/io/asynchronous_io.png" alt="异步I/O"></p><h1 id="I-O多路复用之select、poll、epoll"><a href="#I-O多路复用之select、poll、epoll" class="headerlink" title="I/O多路复用之select、poll、epoll"></a>I/O多路复用之select、poll、epoll</h1><h2 id="select、poll"><a href="#select、poll" class="headerlink" title="select、poll"></a>select、poll</h2><blockquote><p>select的一个确定在于单个进程能够监视的文件描述符的数量存在最大限制，在linux上一般为1024<br>poll没有最大数量的限制，但是和select一样，都需要在返回后，<strong>通过遍历文件描述符来获取已经就绪的socket</strong>,随着监视的描述符数量的增长，其效率也会线性下降。</p></blockquote><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IO模式&quot;&gt;&lt;a href=&quot;#IO模式&quot; class=&quot;headerlink&quot; title=&quot;IO模式&quot;&gt;&lt;/a&gt;IO模式&lt;/h1&gt;&lt;p&gt;当发生一次read时，会经历两个阶段:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;等待数据准备&lt;/li&gt;
&lt;li&gt;将数据从内核空间拷贝到进程</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="java" scheme="https://lejingw.github.io/tags/java/"/>
    
    <category term="io" scheme="https://lejingw.github.io/tags/io/"/>
    
  </entry>
  
  <entry>
    <title>Use Jmeter#1</title>
    <link href="https://lejingw.github.io/2016/03/15/2016-03-15-use-jmeter-1/"/>
    <id>https://lejingw.github.io/2016/03/15/2016-03-15-use-jmeter-1/</id>
    <published>2016-03-15T07:58:48.000Z</published>
    <updated>2020-10-09T05:56:46.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="run-jmeter"><a href="#run-jmeter" class="headerlink" title="run jmeter"></a>run jmeter</h1><h2 id="non-gui-mode"><a href="#non-gui-mode" class="headerlink" title="non-gui mode"></a>non-gui mode</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jmeter -n -t ~/Desktop/facade_out_test1.jmx -l ~/Desktop/log.jtl</span><br></pre></td></tr></table></figure><h2 id="server-mode"><a href="#server-mode" class="headerlink" title="server mode"></a>server mode</h2><p>for distributed testing, fist run jmeter <code>jmeter-server [-H my.proxy.server -P 8000]</code> in server mode in remote node(s)<br>if you want the serer to exit after a single test has been run, then use jmeter property <code>server.exitaftertest=true</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jmeter -n -t testplan.jmx -r [-Gprop=val] [-Gglobal.properties] [-X]</span><br><span class="line"><span class="built_in">where</span>:</span><br><span class="line">  -G is used to define JMeter properties to be <span class="built_in">set</span> <span class="keyword">in</span> the servers</span><br><span class="line">  -X means <span class="built_in">exit</span> the servers at the end of the <span class="built_in">test</span></span><br><span class="line">  -Rserver1,server2 - can be used instead of -r to provide a list of servers to start</span><br><span class="line">    Overrides remote_hosts, but does not define the property.</span><br><span class="line"></span><br><span class="line">jmeter -n -t script.jmx -r</span><br><span class="line">jmeter -n -t script.jmx -R 192.168.0.18</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://www.tuicool.com/articles/I7Jbmm">多网卡环境下的配置</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;run-jmeter&quot;&gt;&lt;a href=&quot;#run-jmeter&quot; class=&quot;headerlink&quot; title=&quot;run jmeter&quot;&gt;&lt;/a&gt;run jmeter&lt;/h1&gt;&lt;h2 id=&quot;non-gui-mode&quot;&gt;&lt;a href=&quot;#non-gui-m</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="jmeter" scheme="https://lejingw.github.io/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch API 5-结构化搜索</title>
    <link href="https://lejingw.github.io/2016/03/15/2016-03-15-elasticsearch-api-5/"/>
    <id>https://lejingw.github.io/2016/03/15/2016-03-15-elasticsearch-api-5/</id>
    <published>2016-03-15T07:58:25.000Z</published>
    <updated>2020-10-09T05:56:46.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构化搜索"><a href="#结构化搜索" class="headerlink" title="结构化搜索"></a>结构化搜索</h1><h2 id="构建测试数据"><a href="#构建测试数据" class="headerlink" title="构建测试数据"></a>构建测试数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1 创建索引</span><br><span class="line">curl -XDELETE -i &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;my_store&#39;</span><br><span class="line">curl -XPUT -i &quot;http:&#x2F;&#x2F;127.0.0.1:9200&#x2F;my_store&quot; -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">   &quot;mappings&quot;:&#123;</span><br><span class="line">     &quot;products&quot;:&#123;</span><br><span class="line">        &quot;properties&quot;:&#123;</span><br><span class="line">          &quot;productID&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;index&quot;:&quot;not_analyzed&quot;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br><span class="line"></span><br><span class="line">2 批量添加数据</span><br><span class="line">curl -XPOST -i &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;my_store&#x2F;products&#x2F;_bulk&#39; -d &#39;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_id&quot;: 1 &#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 10, &quot;productID&quot; : &quot;XHDK-A-1293-#fJ3&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_id&quot;: 2 &#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 20, &quot;productID&quot; : &quot;KDKE-B-9947-#kL5&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_id&quot;: 3 &#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 30, &quot;productID&quot; : &quot;JODL-X-1937-#pV7&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123; &quot;_id&quot;: 4 &#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 30, &quot;productID&quot; : &quot;QQPX-R-3956-#aD8&quot; &#125;</span><br><span class="line">&#39;</span><br><span class="line"></span><br><span class="line">3 准确值查询</span><br><span class="line">curl -XGET -i &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;my_store&#x2F;products&#x2F;_search&#39; -d &#39;&#123;</span><br><span class="line">&quot;query&quot;:&#123;</span><br><span class="line">&quot;filtered&quot;:&#123;</span><br><span class="line">&quot;filter&quot;:&#123;</span><br><span class="line">&quot;term&quot;:&#123;</span><br><span class="line">&quot;productID&quot;:&quot;KDKE-B-9947-#kL5&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><h2 id="组合过滤"><a href="#组合过滤" class="headerlink" title="组合过滤"></a>组合过滤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -i &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;my_store&#x2F;products&#x2F;_search&#39; -d &#39;&#123;</span><br><span class="line">&quot;query&quot; : &#123;</span><br><span class="line">        &quot;filtered&quot; : &#123;</span><br><span class="line">            &quot;filter&quot; : &#123;</span><br><span class="line">            &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;should&quot;:[</span><br><span class="line">            &#123;&quot;term&quot;:&#123;&quot;price&quot;:20&#125;&#125;,</span><br><span class="line">            &#123;&quot;term&quot;:&#123;&quot;procudtID&quot;:&quot;XHDK-A-1293-#fJ3&quot;&#125;&#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;must_not&quot;:&#123;</span><br><span class="line">            &quot;term&quot;:&#123;&quot;price&quot;:30&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>SELECT product FROM   products<br>WHERE  (price = 20 OR productID = “XHDK-A-1293-#fJ3”)<br>  AND  (price != 30)</p></blockquote><h2 id="查询多个准确值"><a href="#查询多个准确值" class="headerlink" title="查询多个准确值"></a>查询多个准确值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;terms&quot;:&#123;</span><br><span class="line">        &quot;price&quot;:[20,30]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>term 和 terms 是包含操作，而不是相等操作</p></blockquote><h2 id="完全匹配"><a href="#完全匹配" class="headerlink" title="完全匹配"></a>完全匹配</h2><p>假如你真的需要完全匹配这种行为，最好是通过添加另一个字段来实现。在这个字段中，你索引原字段包含值的个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;tags&quot; : [&quot;search&quot;], &quot;tag_count&quot; : 1 &#125;</span><br><span class="line">&#123; &quot;tags&quot; : [&quot;search&quot;, &quot;open_source&quot;], &quot;tag_count&quot; : 2 &#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;my_index&#x2F;my_type&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;filtered&quot; : &#123;</span><br><span class="line">            &quot;filter&quot; : &#123;</span><br><span class="line">                 &quot;bool&quot; : &#123;</span><br><span class="line">                    &quot;must&quot; : [</span><br><span class="line">                        &#123; &quot;term&quot; : &#123; &quot;tags&quot; : &quot;search&quot; &#125; &#125;,</span><br><span class="line">                        &#123; &quot;term&quot; : &#123; &quot;tag_count&quot; : 1 &#125; &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;my_store&#x2F;products&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;filtered&quot; : &#123;</span><br><span class="line">            &quot;filter&quot; : &#123;</span><br><span class="line">                &quot;range&quot; : &#123;</span><br><span class="line">                    &quot;price&quot; : &#123;</span><br><span class="line">                        &quot;gte&quot; : 20,</span><br><span class="line">                        &quot;lt&quot;  : 40</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="日期范围"><a href="#日期范围" class="headerlink" title="日期范围"></a>日期范围</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&quot;range&quot; : &#123;</span><br><span class="line">    &quot;timestamp&quot; : &#123;</span><br><span class="line">        &quot;gt&quot; : &quot;2014-01-01 00:00:00&quot;,</span><br><span class="line">        &quot;lt&quot; : &quot;2014-01-07 00:00:00&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;range&quot;:&#123;</span><br><span class="line">    &quot;timestamp&quot;:&#123;</span><br><span class="line">        &quot;gt&quot;:&quot;now-1h&quot;#最近一小时</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;range&quot; : &#123;</span><br><span class="line">    &quot;timestamp&quot; : &#123;</span><br><span class="line">        &quot;gt&quot; : &quot;2014-01-01 00:00:00&quot;,</span><br><span class="line">        &quot;lt&quot; : &quot;2014-01-01 00:00:00||+1M&quot;#早于2014年1月1号加一个月</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只要在日期后加上双竖线||，就能使用日期数学表达式了</p></blockquote><h2 id="处理null值"><a href="#处理null值" class="headerlink" title="处理null值"></a>处理null值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;my_index&#x2F;posts&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;filtered&quot; : &#123;</span><br><span class="line">            &quot;filter&quot; : &#123;</span><br><span class="line">                &quot;exists&quot; : &#123; &quot;field&quot; : &quot;tags&quot; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET &#x2F;my_index&#x2F;posts&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;filtered&quot; : &#123;</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;missing&quot; : &#123; &quot;field&quot; : &quot;tags&quot; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的exists-missing"><a href="#对象的exists-missing" class="headerlink" title="对象的exists/missing"></a>对象的exists/missing</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;first&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">      <span class="string">&quot;last&quot;</span> :  <span class="string">&quot;Smith&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;name.first&quot;</span> : <span class="string">&quot;John&quot;</span>,</span><br><span class="line">   <span class="string">&quot;name.last&quot;</span>  : <span class="string">&quot;Smith&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;exists&quot;</span> : &#123; <span class="string">&quot;field&quot;</span> : <span class="string">&quot;name&quot;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">===&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;should&quot;</span>: [</span><br><span class="line">            &#123; <span class="string">&quot;exists&quot;</span>: &#123; <span class="string">&quot;field&quot;</span>: &#123; <span class="string">&quot;name.first&quot;</span> &#125;&#125;&#125;,</span><br><span class="line">            &#123; <span class="string">&quot;exists&quot;</span>: &#123; <span class="string">&quot;field&quot;</span>: &#123; <span class="string">&quot;name.last&quot;</span>  &#125;&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤顺序"><a href="#过滤顺序" class="headerlink" title="过滤顺序"></a>过滤顺序</h2><p>bool 条件中过滤器的顺序对性能有很大的影响</p><ul><li>更详细的过滤条件应该被放置在其他过滤器之前，以便在更早的排除更多的文档</li><li>缓存的过滤器非常快，所以它们需要被放在不能缓存的过滤器之前</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;结构化搜索&quot;&gt;&lt;a href=&quot;#结构化搜索&quot; class=&quot;headerlink&quot; title=&quot;结构化搜索&quot;&gt;&lt;/a&gt;结构化搜索&lt;/h1&gt;&lt;h2 id=&quot;构建测试数据&quot;&gt;&lt;a href=&quot;#构建测试数据&quot; class=&quot;headerlink&quot; title=&quot;构</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="elasticsearch" scheme="https://lejingw.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch API 4-索引管理</title>
    <link href="https://lejingw.github.io/2016/03/15/2016-03-15-elasticsearch-api-4/"/>
    <id>https://lejingw.github.io/2016/03/15/2016-03-15-elasticsearch-api-4/</id>
    <published>2016-03-15T07:58:16.000Z</published>
    <updated>2020-10-09T05:56:46.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h1><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>创建索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;:&#123;</span><br><span class="line">        &quot;number_of_shards&quot;:1,#主分片个数，默认5</span><br><span class="line">        &quot;number_of_replicas&quot;:0#每个主分片复制个数，默认1</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mappings&quot;:&#123;</span><br><span class="line">        &quot;type_one&quot;:&#123;&#125;,</span><br><span class="line">        &quot;type_two&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过在conifig/elasticsearch.yml中添加<code>action.auto_create_index:false</code>来防止自动创建索引。</p><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE &#x2F;my_index</span><br><span class="line">DELETE &#x2F;index_one,index_two</span><br><span class="line">DELETE &#x2F;index_*</span><br><span class="line">DELETE &#x2F;_all</span><br></pre></td></tr></table></figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;:&#123;</span><br><span class="line">        &quot;number_of_shards&quot;:1,#主分片个数，默认5</span><br><span class="line">        &quot;number_of_replicas&quot;:0#每个主分片复制个数，默认1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以动态修改分片复制个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_temp_index&#x2F;_settings</span><br><span class="line">&#123;</span><br><span class="line">    &quot;number_of_replicas&quot;:2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置分析器-自定义分析器"><a href="#配置分析器-自定义分析器" class="headerlink" title="配置分析器-自定义分析器"></a>配置分析器-自定义分析器</h2><p>分析器有三个顺序执行的组件结合而成（字符过滤器，分词器，标记过滤器）</p><ol><li>字符过滤器<blockquote><p>可以使用html_strip 字符过滤器，来删除所有的html标签</p></blockquote></li><li>分词器<blockquote><p>standard分词器 将字符串分隔成单独的字词，删除大部分标点符号<br>keyword分词器 输出和它接收到的相同的字符串，不做任何处理<br>whitespace分词器 只通过空格来分隔文本<br>pattern分词器 可以童工正则表达式来分隔文本</p></blockquote></li><li>标记过滤器<blockquote><p>lowercase\stop标记过滤器   </p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;analysis&quot;: &#123;</span><br><span class="line">            &quot;char_filter&quot;: &#123;</span><br><span class="line">                &quot;&amp;_to_and&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:       &quot;mapping&quot;,</span><br><span class="line">                    &quot;mappings&quot;: [ &quot;&amp;&#x3D;&gt; and &quot;]</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;my_stopwords&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:       &quot;stop&quot;,</span><br><span class="line">                    &quot;stopwords&quot;: [ &quot;the&quot;, &quot;a&quot; ]</span><br><span class="line">            &#125;&#125;,</span><br><span class="line">            &quot;analyzer&quot;: &#123;</span><br><span class="line">                &quot;my_analyzer&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:         &quot;custom&quot;,</span><br><span class="line">                    &quot;char_filter&quot;:  [ &quot;html_strip&quot;, &quot;&amp;_to_and&quot; ],</span><br><span class="line">                    &quot;tokenizer&quot;:    &quot;standard&quot;,</span><br><span class="line">                    &quot;filter&quot;:       [ &quot;lowercase&quot;, &quot;my_stopwords&quot; ]</span><br><span class="line">            &#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>创建索引后，用analyze API来测试新的分析器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;my_index&#x2F;_analyze?analyzer&#x3D;my_analyzer</span><br><span class="line">The quick &amp; brown fox</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_index&#x2F;_mapping&#x2F;my_type</span><br><span class="line">&#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &#123;</span><br><span class="line">            &quot;type&quot;:      &quot;string&quot;,</span><br><span class="line">            &quot;analyzer&quot;:  &quot;my_analyzer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><h3 id="元数据中的source字段"><a href="#元数据中的source字段" class="headerlink" title="元数据中的source字段"></a>元数据中的source字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;my_type&quot;: &#123;</span><br><span class="line">            &quot;_source&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;:  false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">限定 _source 字段来请求指定字段</span><br><span class="line">GET &#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:   &#123; &quot;match_all&quot;: &#123;&#125;&#125;,</span><br><span class="line">    &quot;_source&quot;: [ &quot;title&quot;, &quot;created&quot; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元数据中的all字段"><a href="#元数据中的all字段" class="headerlink" title="元数据中的all字段"></a>元数据中的all字段</h3><p>query_string 在没有指定字段时默认用 _all 字段查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">        &quot;_all&quot;: &quot;john smith marketing&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_index&#x2F;my_type&#x2F;_mapping</span><br><span class="line">&#123;</span><br><span class="line">    &quot;my_type&quot;: &#123;</span><br><span class="line">        &quot;include_in_all&quot;: false,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;title&quot;: &#123;</span><br><span class="line">                &quot;type&quot;:           &quot;string&quot;,</span><br><span class="line">                &quot;include_in_all&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>_all 字段仅仅是一个经过分析的 string 字段。它使用默认的分析器来分析它的值，而不管这值本来所在的字段指定的分析器。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_index&#x2F;my_type&#x2F;_mapping</span><br><span class="line">&#123;</span><br><span class="line">    &quot;my_type&quot;: &#123;</span><br><span class="line">        &quot;_all&quot;: &#123; &quot;analyzer&quot;: &quot;whitespace&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元数据中的id字段"><a href="#元数据中的id字段" class="headerlink" title="元数据中的id字段"></a>元数据中的id字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;my_type&quot;: &#123;</span><br><span class="line">            &quot;_id&quot;: &#123;</span><br><span class="line">                &quot;path&quot;: &quot;doc_id&quot; &lt;1&gt;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;properties&quot;: &#123;</span><br><span class="line">                &quot;doc_id&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;:   &quot;string&quot;,</span><br><span class="line">                    &quot;index&quot;:  &quot;not_analyzed&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>警告：虽然这样很方便，但是注意它对 bulk 请求（见【bulk 格式】）有个轻微的性能影响。处理请求的节点将不能仅靠解析元数据行来决定将请求分配给哪一个分片，而需要解析整个文档主体。</p></blockquote><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;my_index_v1</span><br><span class="line">PUT &#x2F;my_index_v1&#x2F;_alias&#x2F;my_index</span><br><span class="line"></span><br><span class="line">GET &#x2F;*&#x2F;_alias&#x2F;my_index</span><br><span class="line">GET &#x2F;my_index_v1&#x2F;_alias&#x2F;*</span><br><span class="line"></span><br><span class="line">POST &#x2F;_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot;: [</span><br><span class="line">        &#123; &quot;remove&quot;: &#123; &quot;index&quot;: &quot;my_index_v1&quot;, &quot;alias&quot;: &quot;my_index&quot; &#125;&#125;,</span><br><span class="line">        &#123; &quot;add&quot;:    &#123; &quot;index&quot;: &quot;my_index_v2&quot;, &quot;alias&quot;: &quot;my_index&quot; &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在应用中使用别名而不是索引。然后你就可以在任何时候重建索引。别名的开销很小，应当广泛使用。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;索引管理&quot;&gt;&lt;a href=&quot;#索引管理&quot; class=&quot;headerlink&quot; title=&quot;索引管理&quot;&gt;&lt;/a&gt;索引管理&lt;/h1&gt;&lt;h2 id=&quot;创建索引&quot;&gt;&lt;a href=&quot;#创建索引&quot; class=&quot;headerlink&quot; title=&quot;创建索引&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="elasticsearch" scheme="https://lejingw.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch API 3-结构化查询排序</title>
    <link href="https://lejingw.github.io/2016/03/02/2016-03-02-elasticsearch-api-3/"/>
    <id>https://lejingw.github.io/2016/03/02/2016-03-02-elasticsearch-api-3/</id>
    <published>2016-03-02T05:33:00.000Z</published>
    <updated>2020-10-09T05:56:46.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询子句"><a href="#查询子句" class="headerlink" title="查询子句"></a>查询子句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;_search?pretty&#39; -d &#39;&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">            &quot;tweet&quot;: &quot;elasticsearch&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><h2 id="合并多子句"><a href="#合并多子句" class="headerlink" title="合并多子句"></a>合并多子句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;_search?pretty&#39; -d &#39;&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;must&quot;: &#123; &quot;match&quot;:      &#123; &quot;email&quot;: &quot;business opportunity&quot; &#125;&#125;,</span><br><span class="line">            &quot;should&quot;: [</span><br><span class="line">                 &#123; &quot;match&quot;:         &#123; &quot;starred&quot;: true &#125;&#125;,</span><br><span class="line">                 &#123; &quot;bool&quot;: &#123;</span><br><span class="line">                       &quot;must&quot;:      &#123; &quot;folder&quot;: &quot;inbox&quot; &#125;&#125;,</span><br><span class="line">                       &quot;must_not&quot;:  &#123; &quot;spam&quot;: true &#125;&#125;</span><br><span class="line">                 &#125;&#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;minimum_should_match&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><h2 id="查询与过滤"><a href="#查询与过滤" class="headerlink" title="查询与过滤"></a>查询与过滤</h2><p>一般来说查询语句要比过滤语句更耗时，并且查询结果也不可缓存。</p><blockquote><p>原则上来说，使用查询语句做<strong>全文本搜索</strong>或其他需要进行<strong>相关性评分</strong>的时候，剩下的全部用<strong>过滤语句</strong></p></blockquote><h2 id="最重要的查询过滤语句"><a href="#最重要的查询过滤语句" class="headerlink" title="最重要的查询过滤语句"></a>最重要的查询过滤语句</h2><h3 id="term过滤"><a href="#term过滤" class="headerlink" title="term过滤"></a>term过滤</h3><p>term主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed的字符串(未经分析的文本数据类型)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;term&quot;: &#123; &quot;age&quot;:    26           &#125;&#125;</span><br><span class="line">&#123; &quot;term&quot;: &#123; &quot;date&quot;:   &quot;2014-09-01&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;term&quot;: &#123; &quot;public&quot;: true         &#125;&#125;</span><br><span class="line">&#123; &quot;term&quot;: &#123; &quot;tag&quot;:    &quot;full_text&quot;  &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="terms过滤"><a href="#terms过滤" class="headerlink" title="terms过滤"></a>terms过滤</h3><p>terms 跟 term 有点类似，但 terms 允许指定多个匹配条件。 如果某个字段指定了多个值，那么文档需要一起去做匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;tag&quot;: [ &quot;search&quot;, &quot;full_text&quot;, &quot;nosql&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="range-过滤"><a href="#range-过滤" class="headerlink" title="range 过滤"></a>range 过滤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">        &quot;age&quot;: &#123;</span><br><span class="line">            &quot;gte&quot;:  20,</span><br><span class="line">            &quot;lt&quot;:   30</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gt :: 大于<br>gte:: 大于等于<br>lt :: 小于<br>lte:: 小于等于</p><h3 id="exists-和-missing-过滤"><a href="#exists-和-missing-过滤" class="headerlink" title="exists 和 missing 过滤"></a>exists 和 missing 过滤</h3><h3 id="bool-过滤"><a href="#bool-过滤" class="headerlink" title="bool 过滤"></a>bool 过滤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">        &quot;must&quot;:     &#123; &quot;term&quot;: &#123; &quot;folder&quot;: &quot;inbox&quot; &#125;&#125;,</span><br><span class="line">        &quot;must_not&quot;: &#123; &quot;term&quot;: &#123; &quot;tag&quot;:    &quot;spam&quot;  &#125;&#125;,</span><br><span class="line">        &quot;should&quot;: [</span><br><span class="line">                    &#123; &quot;term&quot;: &#123; &quot;starred&quot;: true   &#125;&#125;,</span><br><span class="line">                    &#123; &quot;term&quot;: &#123; &quot;unread&quot;:  true   &#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="match-all-查询"><a href="#match-all-查询" class="headerlink" title="match_all 查询"></a>match_all 查询</h3><p>此查询常用于合并过滤条件。 比如说你需要检索所有的邮箱,所有的文档相关性都是相同的，所以得到的_score为1</p><h3 id="match-查询"><a href="#match-查询" class="headerlink" title="match 查询"></a>match 查询</h3><p>match查询是一个标准查询，不管你需要全文本查询还是精确查询基本上都要用到它。<br>如果你使用 match 查询一个全文本字段，它会在真正查询之前用分析器先分析match一下查询字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">        &quot;tweet&quot;: &quot;About Search&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用match下指定了一个确切值，在遇到数字，日期，布尔值或者not_analyzed 的字符串时，它将为你搜索你给定的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;match&quot;: &#123; &quot;age&quot;:    26           &#125;&#125;</span><br><span class="line">&#123; &quot;match&quot;: &#123; &quot;date&quot;:   &quot;2014-09-01&quot; &#125;&#125;</span><br><span class="line">&#123; &quot;match&quot;: &#123; &quot;public&quot;: true         &#125;&#125;</span><br><span class="line">&#123; &quot;match&quot;: &#123; &quot;tag&quot;:    &quot;full_text&quot;  &#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>提示： 做精确匹配搜索时，你最好用过滤语句，因为过滤语句可以缓存数据。</p></blockquote><h3 id="bool-查询"><a href="#bool-查询" class="headerlink" title="bool 查询"></a>bool 查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -i &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;website&#x2F;_search?pretty&#39; -d &#39;&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;must&quot;:     &#123; &quot;match&quot;: &#123; &quot;title&quot;: &quot;first&quot; &#125;&#125;,</span><br><span class="line">            &quot;must_not&quot;: &#123; &quot;match&quot;: &#123; &quot;tag&quot;:   &quot;11&quot; &#125;&#125;,</span><br><span class="line">            &quot;should&quot;: [</span><br><span class="line">                &#123; &quot;match&quot;: &#123; &quot;tag&quot;: &quot;starred&quot; &#125;&#125;,</span><br><span class="line">                &#123; &quot;range&quot;: &#123; &quot;date&quot;: &#123; &quot;gte&quot;: &quot;2014&#x2F;01&#x2F;01&quot; &#125;&#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>should 查询指定文档，有则可以为文档相关性加分</p></blockquote><h3 id="带过滤的查询语句"><a href="#带过滤的查询语句" class="headerlink" title="带过滤的查询语句"></a>带过滤的查询语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -i &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;website&#x2F;_search?pretty&#39; -d &#39;&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;filtered&quot;: &#123;</span><br><span class="line">            &quot;query&quot;:  &#123; &quot;match&quot;: &#123; &quot;title&quot;: &quot;first&quot; &#125;&#125;,</span><br><span class="line">            &quot;filter&quot;: &#123; &quot;term&quot;: &#123; &quot;tags&quot;: &quot;testing&quot; &#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><h3 id="验证查询语句"><a href="#验证查询语句" class="headerlink" title="验证查询语句"></a>验证查询语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -i &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;_validate&#x2F;query?explain&amp;pretty&#39; -d &#39;&#123;</span><br><span class="line">   &quot;query&quot;: &#123;</span><br><span class="line">      &quot;match&quot; : &#123;</span><br><span class="line">         &quot;tweet&quot; : &quot;really powerful&quot;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -i &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;website&#x2F;blog&#x2F;_search&#39; -d &#39;&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;filtered&quot;:&#123;</span><br><span class="line">            &quot;filter&quot;:&#123;</span><br><span class="line">                &quot;query&quot;:&#123;</span><br><span class="line">                    &quot;match&quot;:&#123;</span><br><span class="line">                        &quot;title&quot;:&quot;first&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;sort&quot;:[</span><br><span class="line">        &#123;&quot;date&quot;:&#123;&quot;order&quot;:&quot;desc&quot;&#125;&#125;</span><br><span class="line">        &#123;&quot;views&quot;:&#123;&quot;order&quot;:&quot;asc&quot;&#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><pre><code>curl -XGET -i &#39;http://localhost:9200/_search?sort=date:desc&amp;sort=views&amp;title=first&#39;</code></pre><h3 id="为多值字段排序"><a href="#为多值字段排序" class="headerlink" title="为多值字段排序"></a>为多值字段排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;sort&quot;: &#123;</span><br><span class="line">    &quot;dates&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;,</span><br><span class="line">        &quot;mode&quot;:  &quot;min&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>min, max, avg 或 sum</p></blockquote><h2 id="相关性分析"><a href="#相关性分析" class="headerlink" title="相关性分析"></a>相关性分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;_search?explain&amp;format&#x3D;yaml&#39; -d &#39;&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;&quot;title&quot;:&quot;second&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br><span class="line"></span><br><span class="line">curl -XGET &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;website&#x2F;blog&#x2F;123&#x2F;_explain?format&#x3D;yaml&#39; -d &#39;&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;&quot;title&quot;:&quot;second&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查询子句&quot;&gt;&lt;a href=&quot;#查询子句&quot; class=&quot;headerlink&quot; title=&quot;查询子句&quot;&gt;&lt;/a&gt;查询子句&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="elasticsearch" scheme="https://lejingw.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch API 2-搜索、映射和分析</title>
    <link href="https://lejingw.github.io/2016/03/02/2016-03-02-elasticsearch-api-2/"/>
    <id>https://lejingw.github.io/2016/03/02/2016-03-02-elasticsearch-api-2/</id>
    <published>2016-03-02T05:32:00.000Z</published>
    <updated>2020-10-09T05:56:46.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="空搜索"><a href="#空搜索" class="headerlink" title="空搜索"></a>空搜索</h2><p>template:</p><p><code>curl -XGET -i &#39;http://locahost:9200/_search?timeout=5s -d &#39;&#123;&#125;&#39;</code></p><p><code>GET /_search?timeout=500ms</code></p><p><code>GET /_all/tweet/_search</code> 查询所有类型为tweet的文档</p><p><code>GET /gb,us/user,tweet/_search</code></p><p><code>GET /g*,u*/_search</code></p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>size默认为10，from默认从0开始</p><p><code>GET /_search?size=5&amp;from=10</code></p><h2 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h2><p><code>+name:(mary john) +date:&gt;2014-09-10 +(aggregations geo)</code></p><p>url编码</p><p><code>?q=%2Bname%3A(mary+john)+%2Bdate%3A%3E2014-09-10+%2B(aggregations+geo)</code></p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p><code>curl -XGET -i &#39;http://localhost:9200/website/_mapping/blog?pretty&#39;</code></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="确切值exact-value和全文full-text"><a href="#确切值exact-value和全文full-text" class="headerlink" title="确切值exact value和全文full text"></a>确切值exact value和全文full text</h3><h3 id="分析器analyzer"><a href="#分析器analyzer" class="headerlink" title="分析器analyzer"></a>分析器analyzer</h3><p>分析</p><ul><li>首先，标记化一个文本块为适用于倒排索引单独的词(term)</li><li>然后标准化这些词为标准形式，提高它们的“可搜索性”或“查全率”</li></ul><p>分析器分析过程</p><ul><li>字符过滤器 character filter</li><li>分词器 tokenizer</li><li>标记过滤 token filters</li></ul><p>内置分析器</p><ul><li>标准分析器 standard</li><li>简单分析器 simple</li><li>空格分析器 whitespace</li><li>英文分析器 english</li></ul><h3 id="测试分析器"><a href="#测试分析器" class="headerlink" title="测试分析器"></a>测试分析器</h3><p><code>curl -XGET -i &#39;http://localhost:9200/_analyze?analyzer=standard&amp;text=Text%2Dto%2danalyze&amp;pretty&#39;</code></p><h2 id="映射-1"><a href="#映射-1" class="headerlink" title="映射"></a>映射</h2><h3 id="index"><a href="#index" class="headerlink" title="index"></a>index</h3><table><thead><tr><th>值</th><th></th><th>解释</th></tr></thead><tbody><tr><td>analyzed</td><td>全文文本</td><td>首先分析这个字符串，然后索引。换言之，以全文形式索引此字段。</td></tr><tr><td>not_analyzed</td><td>确切值</td><td>索引这个字段，使之可以被搜索，但是索引内容和指定值一样。不分析此字段。</td></tr><tr><td>no</td><td></td><td>不索引这个字段。这个字段不能为搜索到。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tag&quot;: &#123;</span><br><span class="line">        &quot;type&quot;:     &quot;string&quot;,</span><br><span class="line">        &quot;index&quot;:    &quot;not_analyzed&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他简单类型（long、double、date等等）也接受index参数，但相应的值只能是no和not_analyzed，它们的值不能被分析。</p></blockquote><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tweet&quot;: &#123;</span><br><span class="line">        &quot;type&quot;:     &quot;string&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;english&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新映射"><a href="#更新映射" class="headerlink" title="更新映射"></a>更新映射</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -i &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;gb&#39; -d &#39;&#123;</span><br><span class="line">&quot;mappings&quot;: &#123;</span><br><span class="line">&quot;tweet&quot; : &#123;</span><br><span class="line">&quot;properties&quot; : &#123;</span><br><span class="line">&quot;tweet&quot; : &#123;</span><br><span class="line">&quot;type&quot; :    &quot;string&quot;,</span><br><span class="line">&quot;analyzer&quot;: &quot;english&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;date&quot; : &#123;</span><br><span class="line">&quot;type&quot; :   &quot;date&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;name&quot; : &#123;</span><br><span class="line">&quot;type&quot; :   &quot;string&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;user_id&quot; : &#123;</span><br><span class="line">&quot;type&quot; :   &quot;long&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>你可以向已有映射中增加字段，但你 <strong>不能修改</strong> 它。如果一个字段在映射中已经存在，这可能意味着那个字段的数据已经被索引。如果你改变了字段映射，那已经被索引的数据将错误并且不能被正确的搜索到。</p></blockquote><p>新的not_analyzed类型的文本字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -i &#39;http:&#x2F;&#x2F;localhost:9200&#x2F;gb&#x2F;_mapping&#x2F;tweet&#39; -d &#39;&#123;</span><br><span class="line">&quot;properties&quot;:&#123;</span><br><span class="line">&quot;tag&quot;:&#123;</span><br><span class="line">&quot;type&quot;:&quot;string&quot;,</span><br><span class="line">&quot;index&quot;:&quot;not_analyzed&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><h2 id="测试映射"><a href="#测试映射" class="headerlink" title="测试映射"></a>测试映射</h2><pre><code>curl -XGET -i &#39;http://localhost:9200/gb/_analyze?field=tweet&amp;text=Black-cats&#39;curl -XGET -i &#39;http://localhost:9200/gb/_analyze?field=tag&amp;text=Black-cats&#39;</code></pre><h3 id="内部对象的映射"><a href="#内部对象的映射" class="headerlink" title="内部对象的映射"></a>内部对象的映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;gb&quot;: &#123;</span><br><span class="line">    &quot;tweet&quot;: &#123; &lt;1&gt;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;tweet&quot;:            &#123; &quot;type&quot;: &quot;string&quot; &#125;,</span><br><span class="line">        &quot;user&quot;: &#123; &lt;2&gt;</span><br><span class="line">          &quot;type&quot;:             &quot;object&quot;,</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;id&quot;:           &#123; &quot;type&quot;: &quot;string&quot; &#125;,</span><br><span class="line">            &quot;gender&quot;:       &#123; &quot;type&quot;: &quot;string&quot; &#125;,</span><br><span class="line">            &quot;age&quot;:          &#123; &quot;type&quot;: &quot;long&quot;   &#125;,</span><br><span class="line">            &quot;name&quot;:   &#123; &lt;3&gt;</span><br><span class="line">              &quot;type&quot;:         &quot;object&quot;,</span><br><span class="line">              &quot;properties&quot;: &#123;</span><br><span class="line">                &quot;full&quot;:     &#123; &quot;type&quot;: &quot;string&quot; &#125;,</span><br><span class="line">                &quot;first&quot;:    &#123; &quot;type&quot;: &quot;string&quot; &#125;,</span><br><span class="line">                &quot;last&quot;:     &#123; &quot;type&quot;: &quot;string&quot; &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tweet&quot;:            [elasticsearch, flexible, very],</span><br><span class="line">    &quot;user.id&quot;:          [@johnsmith],</span><br><span class="line">    &quot;user.gender&quot;:      [male],</span><br><span class="line">    &quot;user.age&quot;:         [26],</span><br><span class="line">    &quot;user.name.full&quot;:   [john, smith],</span><br><span class="line">    &quot;user.name.first&quot;:  [john],</span><br><span class="line">    &quot;user.name.last&quot;:   [smith]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;空搜索&quot;&gt;&lt;a href=&quot;#空搜索&quot; class=&quot;headerlink&quot; title=&quot;空搜索&quot;&gt;&lt;/a&gt;空搜索&lt;/h2&gt;&lt;p&gt;template:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl -XGET -i &amp;#39;http://locahost:9200/_se</summary>
      
    
    
    
    <category term="technology" scheme="https://lejingw.github.io/categories/technology/"/>
    
    
    <category term="elasticsearch" scheme="https://lejingw.github.io/tags/elasticsearch/"/>
    
  </entry>
  
</feed>
